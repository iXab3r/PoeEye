<controls:MetroWindow x:Class="PoeEyeUi.PoeTrade.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
        xmlns:viewModels="clr-namespace:PoeEyeUi.PoeTrade.ViewModels"
        xmlns:metroModels="clr-namespace:PoeEyeUi.MetroModels"
        xmlns:utilities="clr-namespace:PoeEyeUi.Utilities"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:system="clr-namespace:System;assembly=mscorlib"
        xmlns:net="clr-namespace:FontAwesome.Net;assembly=FontAwesome.Net"
        mc:Ignorable="d"
        Title="{Binding MainWindowTitle}" 
        MinWidth="1200" 
        MinHeight="800" 
        Width="1200" 
        Height="800" 
        d:DataContext="{d:DesignInstance viewModels:MainWindowViewModel}"
        BorderThickness="1" BorderBrush="{StaticResource AccentColorBrush}"
        metroModels:DialogParticipation.Register="{Binding}">

    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Closing">
            <i:InvokeCommandAction Command="{Binding SaveConfigCommand}"/>
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <Window.InputBindings>
        <KeyBinding Command="{Binding ClipboardParserViewModel.ParseClipboard}" Gesture="CTRL+V" />
    </Window.InputBindings>

    <Grid>

        <utilities:DataPiping.DataPipes>
            <utilities:DataPipeCollection>
                <utilities:DataPipe Source="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:MetroWindow}}, Path=IsActive}"
                         Target="{Binding Path=IsMainWindowActive, Mode=OneWayToSource}"/>
            </utilities:DataPipeCollection>
        </utilities:DataPiping.DataPipes>

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <ContentControl Grid.Row="0">
            <StackPanel HorizontalAlignment="Left" Orientation="Horizontal">

            </StackPanel>
        </ContentControl>

        <Border Grid.Row="1">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <ListBox Grid.Column="0"
                         ItemsSource="{Binding TabsList}" 
                         SelectedItem="{Binding SelectedItem}"
                         SelectionMode="Single"
                         Margin="10,10,5,10"
                         Focusable="False"
                         HorizontalContentAlignment="Stretch"
                         ScrollViewer.HorizontalScrollBarVisibility="Disabled">
                    <ListBox.Resources>
                        <Style TargetType="ListBoxItem" BasedOn="{StaticResource ListBoxAsTabControl}" />
                    </ListBox.Resources>
                    <ListBox.ItemTemplate>
                        <DataTemplate DataType="{x:Type viewModels:MainWindowTabViewModel}">
                            <Grid Margin="0,3,0,3">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <DockPanel Grid.Column="0" 
                                           VerticalAlignment="Bottom"
                                           Margin="0,5,0,0">
                                  
                                </DockPanel>

                                <Grid Grid.Column="0" >
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>

                                    <ProgressBar Grid.Column="0" Width="10" Height="NaN"
                                                 Margin="0,0,5,0"
                                                 IsIndeterminate="true"
                                                 Orientation="Vertical"
                                                 Visibility="{Binding IsBusy, Converter={StaticResource BoolFalseToHiddenConverter}}" />

                                    <Label Grid.Column="1"
                                               ToolTip="{Binding TradesListViewModel.Errors}"
                                               Visibility="{Binding TradesListViewModel.Errors, Converter={StaticResource NullToCollapsedConverter}}"
                                               FontFamily="{StaticResource FontAwesome}"
                                               Foreground="{StaticResource ValidationSummaryColor3}"
                                               VerticalAlignment="Stretch"
                                               HorizontalAlignment="Stretch"
                                               VerticalContentAlignment="Center"
                                               HorizontalContentAlignment="Center"
                                               FontSize="20"
                                               Content="{x:Static net:FontAwesome.warning}"/>

                                    <Button Grid.Column="2" 
                                           Margin="5,0"
                                           Style="{StaticResource CircleButton}"
                                           Width="40" Height="40"
                                           HorizontalAlignment="Right"
                                           Command="{Binding SearchCommand}"
                                           Focusable="False"
                                           CommandParameter="{Binding QueryViewModel.PoeQueryBuilder}" 
                                           Content="{x:Static net:FontAwesome.search}"
                                           Visibility="{Binding TradesListViewModel.ActiveQuery, Converter={StaticResource NotNullToCollapsedConverter}}" />

                                    <Button Grid.Column="2" 
                                           Margin="5,0"
                                           Style="{StaticResource CircleButton}"
                                           Width="40" Height="40"
                                           HorizontalAlignment="Right"
                                           Command="{Binding RefreshCommand}"
                                           Focusable="False"
                                           Content="{x:Static net:FontAwesome.refresh}"
                                           Visibility="{Binding TradesListViewModel.ActiveQuery, Converter={StaticResource NullToCollapsedConverter}}" />
                                </Grid>

                                <TextBlock Grid.Column="1" 
                                           Text="{Binding TabName}" 
                                           FontSize="16" TextWrapping="Wrap" VerticalAlignment="Center"/>

                                <Border Grid.Column="2"
                                        Margin="10,0,10,0">
                                    <Border Height="30" VerticalAlignment="Center">
                                        <Border.Style>
                                            <Style TargetType="Border">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding HasNewTrades}" Value="True">
                                                        <Setter Property="BorderThickness" Value="0,0,0,2"/>
                                                        <Setter Property="BorderBrush" Value="{StaticResource PoeTradeNewItemBrush}"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Border.Style>
                                        <TextBlock 
                                           FontSize="16" 
                                           VerticalAlignment="Center"
                                           HorizontalAlignment="Right" >
                                            <TextBlock.Inlines>
                                                <Run Text="{Binding NewItemsCount, Mode=OneWay, StringFormat='{}{0,2}'}" Foreground="{StaticResource PoeTradeNewItemBrush}"/> /
                                                <Run Text="{Binding RemovedItemsCount, Mode=OneWay, StringFormat='{}{0,2}'}" Foreground="{StaticResource PoeTradeRemovedItemBrush}"/> /
                                                <Run Text="{Binding NormalItemsCount, Mode=OneWay, StringFormat='{}{0,2}'}"/>
                                            </TextBlock.Inlines>
                                        </TextBlock>
                                    </Border>
                                </Border>

                                <StackPanel Grid.Column="3" 
                                            Orientation="Horizontal">
                                    <ToggleButton Width="40" Height="40"
                                                  ToolTip="Audio notifications for this tab"
                                                  Focusable="False"
                                                  IsChecked="{Binding AudioNotificationEnabled}">
                                        <ToggleButton.Style>
                                            <Style TargetType="ToggleButton" BasedOn="{StaticResource ToggleCircleButton}">
                                                <Setter Property="Content" Value="{x:Static net:FontAwesome.volume_off}"></Setter>
                                                <Style.Triggers>
                                                    <Trigger Property="IsChecked" Value="True">
                                                        <Setter Property="Content" Value="{x:Static net:FontAwesome.volume_up}"></Setter>
                                                    </Trigger>
                                                </Style.Triggers>
                                            </Style>
                                        </ToggleButton.Style>
                                    </ToggleButton>

                                    <Button Width="24" Height="24"
                                            Style="{StaticResource CircleButton}"
                                            HorizontalAlignment="Right"
                                            Command="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=DataContext.CloseTabCommand}"
                                            CommandParameter="{Binding}"
                                            FontSize="10"
                                            Content="{x:Static net:FontAwesome.close}" />
                                </StackPanel>
                            </Grid>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>

                <ContentControl Grid.Column="1" 
                                Margin="5,10,10,10"
                                Content="{Binding SelectedItem}"/>
            </Grid>
        </Border>


        <Border Grid.Row="2" 
                BorderThickness="0,1,0,0" BorderBrush="{StaticResource AccentColorBrush}" Margin="5,1,10,5"
                Visibility="{Binding SelectedItem, Converter={StaticResource NullToHiddenConverter}}">
            <Border.Resources>
                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MetroTextBlock}">
                    <Setter Property="FontSize" Value="16"/>
                </Style>
            </Border.Resources>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                    <ColumnDefinition Width="*"></ColumnDefinition>
                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                </Grid.ColumnDefinitions>

                <StackPanel Grid.Column="0" Orientation="Horizontal" Visibility="{Binding SelectedItem.IsBusy, Converter={StaticResource BoolFalseToCollapsedConverter}}">
                    <controls:ProgressRing Height="20" Width="20" IsActive="true" Foreground="{StaticResource TextBrush}"  />
                    <TextBlock Text="Updating..."/>
                </StackPanel>

                <TextBlock Grid.Column="1"  
                           Margin="10,0,0,0" 
                           Visibility="{Binding SelectedItem.TradesListViewModel.ActiveQuery, Converter={StaticResource NullToCollapsedConverter}}"
                           Text="{Binding SelectedItem.TradesListViewModel.TimeSinceLastUpdate.TotalSeconds, Mode=OneWay, StringFormat='Elapsed since last update: {0:F0}s'}"/>

                <ContentPresenter Grid.Column="2"  Content="{Binding SelectedItem.RecheckPeriodViewModel}" />

            </Grid>
        </Border>


    </Grid>

    <controls:MetroWindow.LeftWindowCommands>
        <controls:WindowCommands>
            <StackPanel Orientation="Horizontal">

                <Button 
                        ToolTip="Create new tab"
                        Command="{Binding CreateNewTabCommand}"
                        Content="Create new tab"
                        FontWeight="Bold">
                </Button>
            </StackPanel>

        </controls:WindowCommands>

    </controls:MetroWindow.LeftWindowCommands>

    <controls:MetroWindow.RightWindowCommands>
        <controls:WindowCommands>
            <StackPanel Orientation="Horizontal">
                
                <ContentPresenter Content="{Binding ProxyProviderViewModel}" />
                
                <controls:ProgressRing Height="20" Width="20" IsActive="true" 
                                       Foreground="{StaticResource TextBrush}" 
                                       Visibility="{Binding ApplicationUpdater.IsBusy, Converter={StaticResource BoolFalseToCollapsedConverter}}" />
                <Button Command="{Binding ApplicationUpdater.CheckForUpdatesCommand}"
                    CommandParameter="{Binding}"
                    IsEnabled="{Binding ApplicationUpdater.IsBusy, Converter={StaticResource BoolTrueToCollapsedConverter}}"
                    Content="Check for updates" />

                <StackPanel Orientation="Horizontal" Height="24" Margin="5,0">
                    <Button Content="&#xF085; Settings" FontFamily="{StaticResource FontAwesome}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Click">
                                <utilities:SetPropertyAction PropertyName="IsOpen" 
                                                             TargetObject="{Binding ElementName=SettingsFlyout}"
                                                             PropertyValue="{Binding ElementName=SettingsFlyout, Path=IsOpen, Converter={StaticResource BoolInversionConverter}}" >

                                </utilities:SetPropertyAction>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>
                </StackPanel>
            </StackPanel>
        </controls:WindowCommands>
    </controls:MetroWindow.RightWindowCommands>

    <controls:MetroWindow.Flyouts >
        <controls:FlyoutsControl >
            <controls:Flyout Header="&#xF0EA; Clipboard" x:Name="ClipboardFlyout"
                             FontFamily="{StaticResource FontAwesome}"
                             Position="Bottom"
                             BorderThickness="0,1,0,0"
                             BorderBrush="{StaticResource AccentColorBrush}"
                             IsOpen="{Binding  ClipboardParserViewModel.IsOpen, Mode=TwoWay}">

                <Grid>
                    <controls:MetroProgressBar IsIndeterminate="True" 
                                               Foreground="{StaticResource TextBrush}"  
                                               Visibility="{Binding ClipboardParserViewModel.IsBusy, Converter={StaticResource BoolFalseToCollapsedConverter}}"/>

                    <Grid MaxWidth="1000"
                          Visibility="{Binding ClipboardParserViewModel.IsBusy, Converter={StaticResource BoolTrueToCollapsedConverter}}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <ContentControl Grid.Column="0"
                                    Content="{Binding ClipboardParserViewModel.ItemFromClipboard}"/>

                        <Button Grid.Column="1" Content="Import" 
                                Command="{Binding CreateNewTabCommand}" 
                                CommandParameter="{Binding ClipboardParserViewModel.ItemQueryInfo}"
                                Margin="15">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Click">
                                    <utilities:SetPropertyAction PropertyName="IsOpen" TargetObject="{Binding ElementName=ClipboardFlyout}">
                                        <utilities:SetPropertyAction.PropertyValue>
                                            <system:Boolean>False</system:Boolean>
                                        </utilities:SetPropertyAction.PropertyValue>
                                    </utilities:SetPropertyAction>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Button>
                    </Grid>
                </Grid>


            </controls:Flyout>

            <controls:Flyout Header="&#xF085; Settings" x:Name="SettingsFlyout"
                             FontFamily="{StaticResource FontAwesome}"
                             Position="Right"
                             Width="300"
                             Margin="0, 20"
                             BorderBrush="{StaticResource AccentColorBrush}">

                <Grid Margin="5,0">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <StackPanel Grid.Row="0" 
                                Orientation="Horizontal" Height="24">
                        <Label  Style="{StaticResource IconLabel}" Content="Clipboard monitoring:" />
                        <controls:ToggleSwitchButton ToolTip="Enable clipboard monitoring" Height="26"
                                                     IsChecked="{Binding ClipboardParserViewModel.MonitoringEnabled}"/>
                    </StackPanel>

                    <StackPanel Grid.Row="1" 
                                Orientation="Horizontal" Height="24" >
                        <Label Style="{StaticResource IconLabel}" Content="Audio:" />
                        <controls:ToggleSwitchButton ToolTip="Audio notification for new items"  Height="26"
                                                     IsChecked="{Binding AudioNotificationsEnabled}"/>
                    </StackPanel>

                    <StackPanel Grid.Row="2" 
                                Orientation="Vertical" >
                        <Label Content="Currencies rate (in Chaos orbs)" Margin="0,5,0,2" Style="{StaticResource IconLabel}"/>
                        <ItemsControl ItemsSource="{Binding CurrenciesPriceInChaosOrbs}" BorderThickness="0,1" BorderBrush="{StaticResource AccentColorBrush}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <StackPanel Orientation="Horizontal" Margin="0,2">
                                        <Label Width="100" 
                                               HorizontalContentAlignment="Right" HorizontalAlignment="Stretch" 
                                               Content="{Binding Item1, Mode=OneWay}"/>
                                        <controls:NumericUpDown Width="100" 
                                                                Style="{StaticResource QueryNumericUpDownMax}" 
                                                                Value="{Binding Item2, Converter={StaticResource NullableConverter}}" StringFormat="{}{0:F2}"/>
                                    </StackPanel>

                                </DataTemplate>

                            </ItemsControl.ItemTemplate>

                        </ItemsControl>
                    </StackPanel>
                </Grid>


            </controls:Flyout>
        </controls:FlyoutsControl>
    </controls:MetroWindow.Flyouts>

</controls:MetroWindow>
    

