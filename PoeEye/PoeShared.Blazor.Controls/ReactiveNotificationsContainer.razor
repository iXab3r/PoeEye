@using System.Threading
@using PoeShared.Blazor.Controls.Services
@inherits PoeShared.Blazor.BlazorReactiveComponent
@inject INotificationService NotificationService
@inject ModalService ModalService

@if (ownsAntContainer)
{
    <AntContainer/>
}

@code {

    private bool ownsAntContainer;

    [Parameter] public IObservable<NotificationConfig>? Notifications { get; set; }

    [Parameter] public IObservable<AntConfirmRequest>? ConfirmRequests { get; set; }

    [Inject] internal IScopedAntContainerRegistry? AntRegistry { get; init; }

    public async void CloseAll()
    {
        await ModalService.DestroyAllConfirmAsync();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (AntRegistry == null)
        {
            throw new InvalidOperationException("AntRegistry is not initialized");
        }

        ownsAntContainer = AntRegistry.TryAcquire();

        AntRegistry.Released += OnAntContainerReleased;
        Disposable.Create(() => AntRegistry.Released -= OnAntContainerReleased).AddTo(Anchors);

        base.OnInitialized();
    }

    private void OnAntContainerReleased()
    {
        // try to take over when previous owner is disposed
        if (AntRegistry == null)
        {
            throw new InvalidOperationException("AntRegistry is not initialized");
        }

        if (!ownsAntContainer && AntRegistry.TryAcquire())
        {
            ownsAntContainer = true;
            Refresh("AntRegistry re-registration").AndForget(ignoreExceptions: true);
        }
    }

    protected override async Task OnAfterFirstRenderAsync()
    {
        await base.OnAfterFirstRenderAsync();

        var synchronizationContext = SynchronizationContext.Current ?? throw new InvalidOperationException("Synchronization context must be set");

        this.WhenAnyValue(x => x.Notifications)
            .Select(x => x ?? Observable.Empty<NotificationConfig>())
            .Switch()
            .ObserveOn(synchronizationContext)
            .Subscribe(x =>
            {
                Log.Info($"Showing notification {x}");
                NotificationService.Open(x);
            })
            .AddTo(Anchors);

        this.WhenAnyValue(x => x.ConfirmRequests)
            .Select(x => x ?? Observable.Empty<AntConfirmRequest>())
            .Switch()
            .ObserveOn(synchronizationContext)
            .SubscribeAsync(async x =>
            {
                Log.Info($"Showing confirmation dialog {x}");
                var result = await ModalService.ConfirmAsync(x.Options);
                x.ReportResult(result);
            })
            .AddTo(Anchors);
    }

}