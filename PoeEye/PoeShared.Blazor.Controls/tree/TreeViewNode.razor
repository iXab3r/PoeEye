@namespace PoeShared.Blazor.Controls
@inherits BlazorReactiveComponent
@typeparam TItem

@{
}

<CascadingValue Value="@this" Name="SelfNode">
    <ReactiveSection Trackers="@(new ReactiveTrackerList()
                                   .With(this.WhenAnyValue(x => x.IsVisible, x => x.Disabled, x => x.Selected))
                                   .With(this.WhenAnyValue(x => x.SwitcherClose, x => x.SwitcherOpen))
                                   .With(this.WhenAnyValue(x => x.IsTargetContainer, x => x.IsTargetBelow, x => x.IsDragTarget, x => x.IsLastNode)))">
        <div @key="NodeId"
             @ref="@ElementRef"
             class="@classMapper.Class"
             style="@Style">

            <TreeViewIndent TreeLevel="@TreeLevel" TItem="TItem"></TreeViewIndent>

            <TreeViewNodeSwitcher OnSwitcherClick="@OnSwitcherClick" TItem="TItem"></TreeViewNodeSwitcher>

            <TreeViewNodeTitle TItem="TItem"></TreeViewNodeTitle>
        </div>
    </ReactiveSection>
</CascadingValue>

<CascadingValue Value="@this" Name="Node">
    @if (DataItem != null && ChildContent == null)
    {
        foreach (var item in ChildDataItems)
        {
            <TreeViewNode DataItem="@item" @key="@($"TreeViewNode-{item?.GetHashCode()}")"></TreeViewNode>
        }
    }
    else if (ChildContent != null)
    {
        @ChildContent
    }
</CascadingValue>