@namespace PoeShared.Blazor.Controls
@inherits BlazorReactiveComponent
@typeparam TItem

<span class="@TitleClassMapper.Class"
      title="@SelfNode.Title"
      @onclick="@(EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(OnClick))"
      @ondblclick="@(EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(OnDblClick))"
      @oncontextmenu="@(EventUtil.AsNonRenderingEventHandler<MouseEventArgs>(OnContextMenu))" @oncontextmenu:stopPropagation="@TreeComponent.OnContextMenu.HasDelegate" @oncontextmenu:preventDefault="@TreeComponent.OnContextMenu.HasDelegate"

      @ondragstart="@(Draggable ? EventUtil.AsNonRenderingEventHandler<DragEventArgs>(OnDragStart) : default)"
      @ondrop="@(Droppable ? EventUtil.AsNonRenderingEventHandler<DragEventArgs>(OnDrop) : default)" @ondrop:preventDefault

      @ondragleave="@(Draggable || Droppable ? EventUtil.AsNonRenderingEventHandler<DragEventArgs>(OnDragLeave) : default)"
      @ondragenter="@(Draggable || Droppable ? EventUtil.AsNonRenderingEventHandler<DragEventArgs>(OnDragEnter) : default)"
      @ondragend="@(Draggable || Droppable ? EventUtil.AsNonRenderingEventHandler<DragEventArgs>(OnDragEnd) : default)"
      
      @ondragover="@(Draggable || Droppable ? EventUtil.AsNonRenderingEventHandler<DragEventArgs>(OnDragOver) : default)" @ondragover:preventDefault

      aria-dropeffect="@(SelfNode.Droppable ? "move" : "none")"
      draggable="@(Draggable ? "true" : "false")"
      aria-grabbed="true">
    @if (TreeComponent.TitleIconTemplate != null && TreeComponent.ShowIcon)
    {
        <span class="ant-tree-iconEle @(SelfNode.IsSwitcherOpen ? "ant-tree-icon__open" : "") @(SelfNode.IsSwitcherClose ? "ant-tree-icon__close" : "") ">
            <span class="ant-tree-iconEle ant-tree-icon__customize">
                @TreeComponent.TitleIconTemplate(SelfNode)
            </span>
        </span>
    }
    else if (string.IsNullOrWhiteSpace(SelfNode.Icon) == false && TreeComponent.ShowIcon)
    {
        <span class="ant-tree-iconEle @(SelfNode.IsSwitcherOpen ? "ant-tree-icon__open" : "") @(SelfNode.IsSwitcherClose ? "ant-tree-icon__close" : "") ">
            <span class="ant-tree-iconEle ant-tree-icon__customize">
                @if (string.IsNullOrWhiteSpace(SelfNode.Icon) == false)
                {
                    <Icon Type="@SelfNode.Icon" Theme="outline"/>
                }
            </span>
        </span>
    }
    @if (TreeComponent.TitleTemplate != null)
    {
        @TreeComponent.TitleTemplate(SelfNode)
    }
    else
    {
        <span class="ant-tree-title" style="pointer-events: none;">
            @if (SelfNode.TitleTemplate != null)
            {
                @SelfNode.TitleTemplate
            }
            else
            {
                @SelfNode.Title
            }
        </span>
    }
    <ReactiveSection Trackers="@(new() {this.WhenAnyValue(x => x.SelfNode.IsDragTarget)})">
        @if (SelfNode.IsDragTarget)
        {
            <div class="ant-tree-drop-indicator" style="left:@(SelfNode.IsTargetBottom ? "4px" : "28px");right:0;bottom:-3px;"></div>
        }
    </ReactiveSection>
</span>