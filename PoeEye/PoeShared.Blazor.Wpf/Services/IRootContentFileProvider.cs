using System.IO;
using Microsoft.Extensions.FileProviders;

namespace PoeShared.Blazor.Wpf.Services;

/// <summary>
/// A composite file provider that searches for a valid 'wwwroot' directory containing static web assets (HTML, CSS, JS, images, etc.)
/// required for Blazor applications. It probes known locations such as the entry assembly directory, executing assembly directory,
/// and the current working directory. At runtime, it can dynamically include additional static assets from JSON manifest files
/// typically generated during the build or deployment phase.
/// <para>
/// The 'wwwroot' folder conventionally serves as the root directory for static web files in ASP.NET and Blazor applications.
/// It commonly includes client-side resources like CSS, JavaScript files, images, and fonts.
/// </para>
/// <para>
/// At runtime, additional asset files defined in JSON manifest files (e.g., generated by build tools or deployment scripts) 
/// can be dynamically added to the file provider to support modular or dynamically loaded web content.
/// </para>
/// </summary>
public interface IRootContentFileProvider : IFileProvider
{
    /// <summary>
    /// Adds an individual runtime static asset file(.staticwebassets.runtime.json) to the composite file provider. Typically, these files are JSON manifests 
    /// or configuration files generated at runtime, listing static assets that should become available to the Blazor application.
    /// </summary>
    /// <param name="fileInfo">The runtime-generated file containing asset definitions (usually JSON).</param>
    public void AddRuntimeAssetsFile(FileInfo fileInfo);

    /// <summary>
    /// Dynamically adds a content root(wwwroot) directory at runtime. This is useful when static content
    /// needs to be provided from directories that weren't known or didn't exist at the application's startup.
    /// </summary>
    /// <param name="contentRoot">The new content root directory containing static web assets.</param>
    public void AddContentRoot(DirectoryInfo contentRoot);
}