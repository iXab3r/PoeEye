using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using Microsoft.Extensions.FileProviders;
using Microsoft.Extensions.Primitives;
using PoeShared.Logging;
using PoeShared.Scaffolding;

namespace PoeShared.Blazor.Wpf.Services;

/// <summary>
/// A composite file provider that searches for a valid 'wwwroot' directory containing static web assets (HTML, CSS, JS, images, etc.)
/// required for Blazor applications. It probes known locations such as the entry assembly directory, executing assembly directory,
/// and the current working directory. At runtime, it can dynamically include additional static assets from JSON manifest files
/// typically generated during the build or deployment phase.
/// <para>
/// The 'wwwroot' folder conventionally serves as the root directory for static web files in ASP.NET and Blazor applications.
/// It commonly includes client-side resources like CSS, JavaScript files, images, and fonts.
/// </para>
/// <para>
/// At runtime, additional asset files defined in JSON manifest files (e.g., generated by build tools or deployment scripts) 
/// can be dynamically added to the file provider to support modular or dynamically loaded web content.
/// </para>
/// </summary>
internal sealed class RootContentFileProvider : IRootContentFileProvider
{
    private static readonly IFluentLog Log = typeof(RootContentFileProvider).PrepareLogger();

    private readonly ReactiveCompositeFileProvider fileProvider;

    /// <summary>
    /// Initializes a new instance of <see cref="RootContentFileProvider"/> by probing known locations
    /// for the 'wwwroot' directory. If such a directory exists, a caching file provider is registered.
    /// Also registers providers for runtime-generated static web assets specified by JSON files at runtime.
    /// </summary>
    public RootContentFileProvider()
    {
        var pathsToProbe = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
        var entryAssembly = Assembly.GetEntryAssembly();
        if (entryAssembly != null && !string.IsNullOrEmpty(entryAssembly.Location))
        {
            pathsToProbe.Add(Path.GetDirectoryName(entryAssembly.Location));
        }

        var executingAssembly = Assembly.GetExecutingAssembly();
        if (!string.IsNullOrEmpty(executingAssembly.Location))
        {
            pathsToProbe.Add(Path.GetDirectoryName(executingAssembly.Location));
        }

        var currentDirectory = Environment.CurrentDirectory;
        pathsToProbe.Add(currentDirectory);

        var providersToRegister = new List<IFileProvider>();
        foreach (var path in pathsToProbe)
        {
            if (string.IsNullOrEmpty(path))
            {
                continue;
            }
            var wwwrootPath = Path.Combine(path, "wwwroot");
            if (TryCreateCachingFileProvider(new DirectoryInfo(wwwrootPath), out var provider))
            {
                providersToRegister.Add(provider);
            }
        }

        // StaticWebAssetsFileProvider typically handles static assets defined at build time
        providersToRegister.Add(new StaticWebAssetsFileProvider());

        Log.Info($"📦 Registering {providersToRegister.Count} content file providers");
        fileProvider = new ReactiveCompositeFileProvider();
        foreach (var provider in providersToRegister)
        {
            fileProvider.Add(provider);
        }
    }

    /// <summary>
    /// Adds an individual runtime static asset file to the composite file provider. Typically, these files are JSON manifests 
    /// or configuration files generated at runtime, listing static assets that should become available to the Blazor application.
    /// </summary>
    /// <param name="fileInfo">The runtime-generated file containing asset definitions (usually JSON).</param>
    public void AddRuntimeAssetsFile(FileInfo fileInfo)
    {
        Log.Info($"Trying to add new static web assets runtime file: {fileInfo.FullName} (exists: {fileInfo.Exists})");
        var provider = new StaticWebAssetsFileProvider(fileInfo);
        fileProvider.Add(provider);
    }

    /// <summary>
    /// Dynamically adds an additional content root directory at runtime. This is useful when static content
    /// needs to be provided from directories that weren't known or didn't exist at the application's startup.
    /// </summary>
    /// <param name="contentRoot">The new content root directory containing static web assets.</param>
    /// <exception cref="InvalidOperationException">Thrown if the directory does not exist or cannot be registered.</exception>
    public void AddContentRoot(DirectoryInfo contentRoot)
    {
        Log.Info($"Trying to add content root directory: {contentRoot.FullName} (exists: {contentRoot.Exists})");
        try
        {
            if (TryCreateCachingFileProvider(contentRoot, out var provider))
            {
                fileProvider.Add(provider);
                Log.Info($"Added additional content root directory: {contentRoot.FullName}");
            }
            else
            {
                throw new InvalidOperationException($"Could not add content root directory: {contentRoot.FullName}");
            }
        }
        catch (Exception e)
        {
            throw new InvalidOperationException($"Failed to add content root directory: {contentRoot.FullName}", e);
        }
    }

    /// <summary>
    /// Attempts to create a caching physical file provider for the specified 'wwwroot' directory.
    /// The caching provider enhances performance by caching file metadata.
    /// </summary>
    /// <param name="wwwrootDirectory">The directory intended to serve as the root for static web files.</param>
    /// <param name="fileProvider">The created caching file provider, if successful.</param>
    /// <returns><c>true</c> if a valid provider is created; otherwise, <c>false</c>.</returns>
    private static bool TryCreateCachingFileProvider(DirectoryInfo wwwrootDirectory, out IFileProvider fileProvider)
    {
        if (!wwwrootDirectory.Exists)
        {
            fileProvider = null;
            return false;
        }

        Log.Info($"🌐 Checking wwwroot folder: {wwwrootDirectory} (Exists: {wwwrootDirectory.Exists})");

        Log.Info($"✅ Registering caching file provider from directory: {wwwrootDirectory.FullName}");
        fileProvider = CachingPhysicalFileProvider.GetOrAdd(wwwrootDirectory);
        return true;
    }

    /// <summary>
    /// Retrieves information about a specific file within the registered content roots.
    /// </summary>
    /// <param name="subpath">Relative path to the requested file, typically from the web app.</param>
    /// <returns>An <see cref="IFileInfo"/> describing the requested file, including its existence, size, and physical location.</returns>
    public IFileInfo GetFileInfo(string subpath)
    {
        return fileProvider.GetFileInfo(subpath);
    }

    /// <summary>
    /// Enumerates the files and directories contained within a given directory path.
    /// </summary>
    /// <param name="subpath">Relative path to the directory.</param>
    /// <returns>An <see cref="IDirectoryContents"/> representing the contents (files and directories) within the specified path.</returns>
    public IDirectoryContents GetDirectoryContents(string subpath)
    {
        return fileProvider.GetDirectoryContents(subpath);
    }

    /// <summary>
    /// Creates a change token to monitor changes to files matching the specified filter.
    /// This can trigger automatic reloads or dynamic updates in response to file modifications, useful during development or runtime updates.
    /// </summary>
    /// <param name="filter">A glob pattern (e.g., "*.css", "**/*.json") used to specify which files to monitor.</param>
    /// <returns>An <see cref="IChangeToken"/> to track changes and trigger notifications when matching files are modified.</returns>
    public IChangeToken Watch(string filter)
    {
        return fileProvider.Watch(filter);
    }
}
