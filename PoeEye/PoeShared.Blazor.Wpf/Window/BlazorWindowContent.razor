@namespace PoeShared.Blazor.Wpf
@using System.Globalization
@using System.Numerics
@using System.Reactive.Disposables
@using System.Windows
@using System.Windows.Input
@using BlazorComponentUtilities
@using JetBrains.Annotations
@using PoeShared.Blazor.Scaffolding
@using PoeShared.Scaffolding
@using ReactiveUI
@using PoeShared.Blazor
@using Microsoft.AspNetCore.Components.Forms
@using PoeShared.Blazor.Wpf.Services
@using PoeShared.Native
@using MouseEventArgs = Microsoft.AspNetCore.Components.Web.MouseEventArgs
@inherits BlazorReactiveComponent<IBlazorWindow>

<HeadContent>
    <link href="_content/PoeShared.Blazor.Wpf/PoeShared.Blazor.Wpf.bundle.scp.css" rel="stylesheet"/>
</HeadContent>

<div class="d-grid h-100 overflow-hidden" style="@(new CssBuilder().AddValue("grid-template-rows: auto 1fr;").AddValue($"anchor-name: {IBlazorWindow.WindowAnchorName};").Build())">
    <ReactiveSection Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.TitleBarDisplayMode)))">
        @if (DataContext.TitleBarDisplayMode is TitleBarDisplayMode.Custom or TitleBarDisplayMode.Default)
        {
            <div class="d-flex w-100 bg-secondary-subtle text-white text-uppercase font-play align-items-center"
                 style="@(new CssBuilder().AddValue($"anchor-name: {IBlazorWindow.TitleBarAnchorName};").Build())"
                 @ref="@TitleRef">
                <ReactiveSection
                    Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.ViewTypeForTitleBar)))">
                    @{
                        var titleBarViewType = DataContext.ViewTypeForTitleBar;
                    }
                    @if (titleBarViewType != null)
                    {
                        <BlazorContentPresenter
                            @ref="@TitleBarContentPresenter"
                            Content="@(DataContext.DataContext)"
                            ViewType="@(titleBarViewType)">
                        </BlazorContentPresenter>
                    }
                    else
                    {
                        <span class="p-1 py-2 w-100"
                              style="user-select: none;"
                              @ondblclick="ToggleWindowState"
                              @onmousedown="HandleMouseDown">
                            <ReactiveSection Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.Title)))">
                                @DataContext.Title
                            </ReactiveSection>
                        </span>
                    }
                </ReactiveSection>

                <span class="flex-grow-1"></span>
                <span class="d-flex gap-1 h-100">
                <ReactiveSection
                    Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.ShowMinButton)))">
                    @if (DataContext.ShowMinButton)
                    {
                        <button class="btn btn-secondary-outline p-0 m-0 px-2"
                                @onclick="@(() => DataContext.Minimize())">
                            <i class="fa-regular fa-window-minimize"></i>
                        </button>
                    }
                </ReactiveSection>
                <ReactiveSection
                    Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.ShowMaxButton, x => x.WindowState)))">
                    @if (DataContext.WindowState != WindowState.Maximized)
                    {
                        <button class="btn btn-secondary-outline p-0 m-0 px-2"
                                @onclick="@(() => DataContext.WindowState = WindowState.Maximized)">
                            <i class="fa-regular fa-window-maximize"></i>
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-secondary-outline p-0 m-0 px-2"
                                @onclick="@(() => DataContext.WindowState = WindowState.Normal)">
                            <i class="fa-regular fa-window-restore"></i>
                        </button>
                    }
                </ReactiveSection>
                <ReactiveSection
                    Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.ShowCloseButton)))">
                    @if (DataContext.ShowCloseButton)
                    {
                        <button class="btn btn-secondary-outline p-0 m-0 px-2"
                                @onclick="@(() => DataContext.Close())">
                            <i class="fa-solid fa-xmark"></i>
                        </button>
                    }
                </ReactiveSection>
            </span>
            </div>
        }
        else
        {
            <div></div>
        }
    </ReactiveSection>

    <div class="overflow-auto">
        @if (DataContext.Anchors.IsDisposed)
        {
            <div class="d-grid-center">
                <div class="spinner-border"></div>
                Disposed
            </div>
        }
        else if (DataContext.IsDebugMode)
        {
            <div style="max-width: 30em;">
                <table class="table table-dark table-striped table-sm">
                    <colgroup>
                        <col style="width: auto; min-width: 7em;">
                        <col style="width: 100%;">
                    </colgroup>
                    <thead>
                    </thead>
                    <tbody>
                    <tr>
                        <td>
                            <span class="debug-table-header">Title</span>
                        </td>
                        <td>
                            <ReactiveSection
                                Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.Title)))">
                                <InputText type="text" class="form-control" placeholder="name..."
                                           @bind-Value="@DataContext.Title"/>
                            </ReactiveSection>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <span class="debug-table-header">Commands</span>
                        </td>
                        <td>
            <span class="d-flex gap-1">
                <span class="p-1 py-2 border border-1"
                      @onmousedown="StartDrag">
                    Drag
                </span>
                <button class="btn btn-secondary p-0 m-0 px-3"
                        @onclick="@(() => BlazorContentControlAccessor.Control.OpenDevToolsCommand.ExecuteAsync())">
                    DevTools
                </button>
                <span class="vr"></span>
                <button class="btn btn-secondary p-0 m-0 px-1"
                        @onclick="@(() => DataContext.Hide())">
                    Hide
                </button>
                <button class="btn btn-secondary p-0 m-0 px-1"
                        @onclick="@(() => DataContext.Close())">
                    Close
                </button>
                <button class="btn btn-secondary p-0 m-0 px-1"
                        @onclick="@(() => DataContext.Dispose())">
                    Dispose
                </button>
            </span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <span class="debug-table-header">Size</span>
                        </td>
                        <td>
            <span class="d-flex gap-3">
                <ReactiveSection Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.Left)))">
                    <input type="number"
                           class="form-control"
                           value="@($"{DataContext.Left:F0}")"
                           oninput="@((ChangeEventArgs x) =>
                                    {
                                        if (x.Value is string stringValue && int.TryParse(stringValue, out var intValue))
                                        {
                                            DataContext.Left = intValue;
                                        }
                                    })">
                </ReactiveSection>

                <ReactiveSection Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.Top)))">
                    <input type="number"
                           class="form-control"
                           value="@($"{DataContext.Top:F0}")"
                           oninput="@((ChangeEventArgs x) =>
                                    {
                                        if (x.Value is string stringValue && int.TryParse(stringValue, out var intValue))
                                        {
                                            DataContext.Top = intValue;
                                        }
                                    })">
                </ReactiveSection>
                <ReactiveSection Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.Width)))">
                    <input type="number"
                           class="form-control"
                           value="@($"{DataContext.Width:F0}")"
                           oninput="@((ChangeEventArgs x) =>
                                    {
                                        if (x.Value is string stringValue && int.TryParse(stringValue, out var intValue))
                                        {
                                            DataContext.Width = intValue;
                                        }
                                    })">
                </ReactiveSection>
                <ReactiveSection Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.Height)))">
                    <input type="number"
                           class="form-control"
                           value="@($"{DataContext.Height:F0}")"
                           oninput="@((ChangeEventArgs x) =>
                                    {
                                        if (x.Value is string stringValue && int.TryParse(stringValue, out var intValue))
                                        {
                                            DataContext.Height = intValue;
                                        }
                                    })">
                </ReactiveSection>
            </span>

                        </td>
                    </tr>
                    <tr>
                        <td>
                            <span class="debug-table-header">Min Size</span>
                        </td>
                        <td>
            <span class="d-flex gap-1">
                <ReactiveSection
                    Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.MinWidth)))">
                    <input type="number"
                           class="form-control"
                           value="@($"{DataContext.MinWidth:F0}")"
                           oninput="@((ChangeEventArgs x) =>
                                    {
                                        if (x.Value is string stringValue && int.TryParse(stringValue, out var intValue))
                                        {
                                            DataContext.MinWidth = intValue;
                                        }
                                    })">
                </ReactiveSection>
                <ReactiveSection
                    Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.MinHeight)))">
                    <input type="number"
                           class="form-control"
                           value="@($"{DataContext.MinHeight:F0}")"
                           oninput="@((ChangeEventArgs x) =>
                                    {
                                        if (x.Value is string stringValue && int.TryParse(stringValue, out var intValue))
                                        {
                                            DataContext.MinHeight = intValue;
                                        }
                                    })">
                </ReactiveSection>
            </span>

                        </td>
                    </tr>
                    <tr>
                        <td>
                            <span class="debug-table-header">Max Size</span>
                        </td>
                        <td>
            <span class="d-flex gap-1">
                <ReactiveSection
                    Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.MaxWidth)))">
                    <input type="number"
                           class="form-control"
                           value="@($"{DataContext.MaxWidth:F0}")"
                           oninput="@((ChangeEventArgs x) =>
                                    {
                                        if (x.Value is string stringValue && int.TryParse(stringValue, out var intValue))
                                        {
                                            DataContext.MaxWidth = intValue;
                                        }
                                    })">
                </ReactiveSection>
                <ReactiveSection
                    Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.MaxHeight)))">
                    <input type="number"
                           class="form-control"
                           value="@($"{DataContext.MaxHeight:F0}")"
                           oninput="@((ChangeEventArgs x) =>
                                    {
                                        if (x.Value is string stringValue && int.TryParse(stringValue, out var intValue))
                                        {
                                            DataContext.MaxHeight = intValue;
                                        }
                                    })">
                </ReactiveSection>
            </span>

                        </td>
                    </tr>
                    <tr>
                        <td>
                            <span class="debug-table-header">Title Bar</span>
                        </td>
                        <td>
            <span class="d-flex gap-1">
                <ReactiveSection
                    Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.TitleBarDisplayMode)))">
                    <button class="btn btn-secondary p-0 m-0 px-1 rounded-0"
                            disabled="@(DataContext.TitleBarDisplayMode == TitleBarDisplayMode.Default)"
                            @onclick="@(() => DataContext.TitleBarDisplayMode = TitleBarDisplayMode.Default)">
                        Default
                    </button>
                    <button class="btn btn-secondary p-0 m-0 px-1 rounded-0"
                            disabled="@(DataContext.TitleBarDisplayMode == TitleBarDisplayMode.System)"
                            @onclick="@(() => DataContext.TitleBarDisplayMode = TitleBarDisplayMode.System)">
                        System
                    </button>
                    <button class="btn btn-secondary p-0 m-0 px-1 rounded-0"
                            disabled="@(DataContext.TitleBarDisplayMode == TitleBarDisplayMode.Custom)"
                            @onclick="@(() => DataContext.TitleBarDisplayMode = TitleBarDisplayMode.Custom)">
                        Custom
                    </button>
                    <button class="btn btn-secondary p-0 m-0 px-1 rounded-0"
                            disabled="@(DataContext.TitleBarDisplayMode == TitleBarDisplayMode.None)"
                            @onclick="@(() => DataContext.TitleBarDisplayMode = TitleBarDisplayMode.None)">
                        None
                    </button>
                </ReactiveSection>
            </span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <span class="debug-table-header">Opacity</span>
                        </td>
                        <td>
            <span class="d-flex gap-1">
                <ReactiveSection Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.Opacity)))">
                    <input type="number"
                           class="form-control"
                           min="0"
                           max="1"
                           step="0.01"
                           value="@($"{DataContext.Opacity:F2}")"
                           oninput="@((ChangeEventArgs x) =>
                                    {
                                        if (x.Value is string stringValue && double.TryParse(stringValue, out var doubleValue))
                                        {
                                            DataContext.Opacity = doubleValue;
                                        }
                                    })">
                </ReactiveSection>
            </span>

                        </td>
                    </tr>
                    <tr>
                        <td>
                            <span class="debug-table-header">Border Thickness</span>
                        </td>
                        <td>
            <span class="d-flex gap-1">
                <ReactiveSection
                    Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.BorderThickness)))">
                    <input type="number"
                           class="form-control"
                           value="@($"{DataContext.BorderThickness.Left:F0}")"
                           oninput="@((ChangeEventArgs x) =>
                                    {
                                        if (x.Value is string stringValue && int.TryParse(stringValue, out var intValue))
                                        {
                                            DataContext.BorderThickness = DataContext.BorderThickness with {Left = intValue};
                                        }
                                    })">
                </ReactiveSection>
                <ReactiveSection
                    Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.BorderThickness)))">
                    <input type="number"
                           class="form-control"
                           value="@($"{DataContext.BorderThickness.Top:F0}")"
                           oninput="@((ChangeEventArgs x) =>
                                    {
                                        if (x.Value is string stringValue && int.TryParse(stringValue, out var intValue))
                                        {
                                            DataContext.BorderThickness = DataContext.BorderThickness with {Top = intValue};
                                        }
                                    })">
                </ReactiveSection>
                <ReactiveSection Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.Padding)))">
                    <input type="number"
                           class="form-control"
                           value="@($"{DataContext.BorderThickness.Right:F0}")"
                           oninput="@((ChangeEventArgs x) =>
                                    {
                                        if (x.Value is string stringValue && int.TryParse(stringValue, out var intValue))
                                        {
                                            DataContext.BorderThickness = DataContext.BorderThickness with {Right = intValue};
                                        }
                                    })">
                </ReactiveSection>
                <ReactiveSection
                    Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.BorderThickness)))">
                    <input type="number"
                           class="form-control"
                           value="@($"{DataContext.BorderThickness.Bottom:F0}")"
                           oninput="@((ChangeEventArgs x) =>
                                    {
                                        if (x.Value is string stringValue && int.TryParse(stringValue, out var intValue))
                                        {
                                            DataContext.BorderThickness = DataContext.BorderThickness with {Bottom = intValue};
                                        }
                                    })">
                </ReactiveSection>
            </span>

                        </td>
                    </tr>
                    <tr>
                        <td>
                            <span class="debug-table-header">Padding</span>
                        </td>
                        <td>
            <span class="d-flex gap-1">
                <ReactiveSection Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.Padding)))">
                    <input type="number"
                           class="form-control"
                           value="@($"{DataContext.Padding.Left:F0}")"
                           oninput="@((ChangeEventArgs x) =>
                                    {
                                        if (x.Value is string stringValue && int.TryParse(stringValue, out var intValue))
                                        {
                                            DataContext.Padding = DataContext.Padding with {Left = intValue};
                                        }
                                    })">
                </ReactiveSection>
                <ReactiveSection Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.Padding)))">
                    <input type="number"
                           class="form-control"
                           value="@($"{DataContext.Padding.Top:F0}")"
                           oninput="@((ChangeEventArgs x) =>
                                    {
                                        if (x.Value is string stringValue && int.TryParse(stringValue, out var intValue))
                                        {
                                            DataContext.Padding = DataContext.Padding with {Top = intValue};
                                        }
                                    })">
                </ReactiveSection>
                <ReactiveSection Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.Padding)))">
                    <input type="number"
                           class="form-control"
                           value="@($"{DataContext.Padding.Right:F0}")"
                           oninput="@((ChangeEventArgs x) =>
                                    {
                                        if (x.Value is string stringValue && int.TryParse(stringValue, out var intValue))
                                        {
                                            DataContext.Padding = DataContext.Padding with {Right = intValue};
                                        }
                                    })">
                </ReactiveSection>
                <ReactiveSection Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.Padding)))">
                    <input type="number"
                           class="form-control"
                           value="@($"{DataContext.Padding.Bottom:F0}")"
                           oninput="@((ChangeEventArgs x) =>
                                    {
                                        if (x.Value is string stringValue && int.TryParse(stringValue, out var intValue))
                                        {
                                            DataContext.Padding = DataContext.Padding with {Bottom = intValue};
                                        }
                                    })">
                </ReactiveSection>
            </span>

                        </td>
                    </tr>
                    <tr>
                        <td>Flags</td>
                        <td>
            <span class="d-flex gap-5">
                <ReactiveSection
                    Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.ShowInTaskbar)))">
                    <span class="d-flex gap-1">
                        <input id="ShowInTaskbar" type="checkbox"
                               @bind:get="@(DataContext.ShowInTaskbar)"
                               @bind:set="@(x => DataContext.ShowInTaskbar = x)"
                               @bind:event="oninput"/>
                        <label for="ShowInTaskbar" class="rcb-label">
                            ShowInTaskbar
                        </label>
                    </span>
                </ReactiveSection>
                <ReactiveSection
                    Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.IsClickThrough)))">
                    <span class="d-flex gap-1">
                        <input id="IsClickThrough" type="checkbox"
                               @bind:get="@(DataContext.IsClickThrough)"
                               @bind:set="@(x => DataContext.IsClickThrough = x)"
                               @bind:event="oninput"/>
                        <label for="IsClickThrough" class="rcb-label">
                            IsClickThrough
                        </label>
                    </span>
                </ReactiveSection>
                <ReactiveSection Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.Topmost)))">
                    <span class="d-flex gap-1">
                        <input id="Topmost" type="checkbox"
                               @bind:get="@(DataContext.Topmost)"
                               @bind:set="@(x => DataContext.Topmost = x)"
                               @bind:event="oninput"/>
                        <label for="Topmost" class="rcb-label">
                            Topmost
                        </label>
                    </span>
                </ReactiveSection>
                <ReactiveSection
                    Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.NoActivate)))">
                    <span class="d-flex gap-1">
                        <input id="NoActivate" type="checkbox"
                               @bind:get="@(DataContext.NoActivate)"
                               @bind:set="@(x => DataContext.NoActivate = x)"
                               @bind:event="oninput"/>
                        <label for="NoActivate" class="rcb-label">
                            No Activate
                        </label>
                    </span>
                </ReactiveSection>
            </span>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">
            <span class="w-100 d-flex">
                <span class="flex-grow-1"></span>
                <button class="btn btn-success p-0 m-0 px-5"
                        disabled="@(DataContext.IsDebugMode == false)"
                        @onclick="@(() => DataContext.IsDebugMode = false)">
                    Exit debug mode
                </button>
            </span>
                        </td>
                    </tr>
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <BlazorContentPresenter
                @ref="@ContentPresenter"
                Content="@(DataContext.DataContext)"
                ViewType="@(DataContext.ViewType)">
            </BlazorContentPresenter>
        }
    </div>

    <ReactiveSection Trackers="@(new ReactiveTrackerList().With(DataContext.WhenAnyValue(x => x.BorderThickness)))">

        @{
            var borderZIndex = 65535;
            var borderThickness = DataContext.BorderThickness;
            var borderColor = DataContext.BorderColor;
            var borderColorAsHex = $"#{borderColor.R:X2}{borderColor.G:X2}{borderColor.B:X2}{borderColor.A:X2}";
            var cornerThumbSize = "10px";

            var topBorderStyle = new CssBuilder()
                .AddValue($"width: calc(100vw - {borderThickness.Left}px - {borderThickness.Right}px);")
                .AddValue($"height: {borderThickness.Top}px;")
                .AddValue($"left: {borderThickness.Left}px;")
                .AddValue($"top: 0;")
                .AddValue($"background-color: {borderColorAsHex};")
                .AddValue($"z-index: {borderZIndex};")
                .AddValue($"cursor: n-resize;");

            var rightBorderStyle = new CssBuilder()
                .AddValue($"height: calc(100vh - {borderThickness.Top}px - {borderThickness.Bottom}px);")
                .AddValue($"width: {borderThickness.Right}px;")
                .AddValue($"right: 0;")
                .AddValue($"top: {borderThickness.Top}px;")
                .AddValue($"background-color: {borderColorAsHex};")
                .AddValue($"z-index: {borderZIndex};")
                .AddValue($"cursor: e-resize;");

            var bottomBorderStyle = new CssBuilder()
                .AddValue($"width: calc(100vw - {borderThickness.Left}px - {borderThickness.Right}px);")
                .AddValue($"height: {borderThickness.Bottom}px;")
                .AddValue($"left: {borderThickness.Left}px;")
                .AddValue($"bottom: 0;")
                .AddValue($"background-color: {borderColorAsHex};")
                .AddValue($"z-index: {borderZIndex};")
                .AddValue($"cursor: s-resize;");

            var leftBorderStyle = new CssBuilder()
                .AddValue($"height: calc(100vh - {borderThickness.Top}px - {borderThickness.Bottom}px);")
                .AddValue($"width: {borderThickness.Left}px;")
                .AddValue($"top: {borderThickness.Top}px;")
                .AddValue($"left: 0;")
                .AddValue($"background-color: {borderColorAsHex};")
                .AddValue($"z-index: {borderZIndex};")
                .AddValue($"cursor: w-resize;");

            // Corners
            var cornerBase = new CssBuilder()
                .AddValue($"width: {cornerThumbSize};")
                .AddValue($"height: {cornerThumbSize};")
                .AddValue($"position: fixed;")
                .AddValue($"background-color: transparent;")
                .AddValue($"z-index: {borderZIndex + 1};");

            var topLeftCornerStyle = new CssBuilder(cornerBase.ToString())
                .AddValue($"top: 0;")
                .AddValue($"left: 0;")
                .AddValue("cursor: nwse-resize;");

            var topRightCornerStyle = new CssBuilder(cornerBase.ToString())
                .AddValue($"top: 0;")
                .AddValue($"right: 0;")
                .AddValue("cursor: nesw-resize;");

            var bottomLeftCornerStyle =new CssBuilder(cornerBase.ToString())
                .AddValue($"bottom: 0;")
                .AddValue($"left: 0;")
                .AddValue("cursor: nesw-resize;");

            var bottomRightCornerStyle =new CssBuilder(cornerBase.ToString())
                .AddValue($"bottom: 0;")
                .AddValue($"right: 0;")
                .AddValue("cursor: nwse-resize;");
        }

        <!-- Edge Resizers -->
        <div class="position-fixed" style="@topBorderStyle"
             @onmousedown="@(() => StartResize(WindowResizeDirection.Top))"></div>
        <div class="position-fixed" style="@rightBorderStyle"
             @onmousedown="@(() => StartResize(WindowResizeDirection.Right))"></div>
        <div class="position-fixed" style="@bottomBorderStyle"
             @onmousedown="@(() => StartResize(WindowResizeDirection.Bottom))"></div>
        <div class="position-fixed" style="@leftBorderStyle"
             @onmousedown="@(() => StartResize(WindowResizeDirection.Left))"></div>

        <!-- Corner Resizers -->
        <div style="@topLeftCornerStyle" @onmousedown="@(() => StartResize(WindowResizeDirection.TopLeft))"></div>
        <div style="@topRightCornerStyle" @onmousedown="@(() => StartResize(WindowResizeDirection.TopRight))"></div>
        <div style="@bottomLeftCornerStyle" @onmousedown="@(() => StartResize(WindowResizeDirection.BottomLeft))"></div>
        <div style="@bottomRightCornerStyle"
             @onmousedown="@(() => StartResize(WindowResizeDirection.BottomRight))"></div>


    </ReactiveSection>

</div>


@code {
    private readonly SerialDisposable dragAnchor;

    public BlazorWindowContent()
    {
        Anchors.Add(() => TitleBarContentPresenter = null);
        Anchors.Add(() => ContentPresenter = null);
        dragAnchor = new SerialDisposable().AddTo(Anchors);

        ChangeTrackers.Add(this.WhenAnyValue(x => x.DataContext.IsDebugMode));
        ChangeTrackers.Add(this.WhenAnyValue(x => x.DataContext.DataContext));
        ChangeTrackers.Add(this.WhenAnyValue(x => x.DataContext.ViewType));

        this.WhenAnyValue(x => x.TitleBarContentPresenter)
            .WithPrevious()
            .Subscribe(x =>
            {
                if (x.Previous is IDisposable disposableView)
                {
                    disposableView.Dispose();
                }
            })
            .AddTo(Anchors);

        this.WhenAnyValue(x => x.ContentPresenter)
            .WithPrevious()
            .Subscribe(x =>
            {
                if (x.Previous is IDisposable disposableView)
                {
                    disposableView.Dispose();
                }
            })
            .AddTo(Anchors);
    }

    [Inject] public IBlazorContentControlAccessor BlazorContentControlAccessor { get; init; }
    [Inject] public IBlazorWindowAccessor BlazorWindowAccessor { get; init; }

    public BlazorContentPresenter TitleBarContentPresenter { get; private set; }

    public BlazorContentPresenter ContentPresenter { get; private set; }

    public ElementReference TitleRef { get; private set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        DataContext.WhenPreviewKeyDown
            .SubscribeAsync(async x =>
            {
                if (x.Key == Key.F8)
                {
                    DataContext.IsDebugMode = !DataContext.IsDebugMode;
                    x.Handled = true;
                }
                else if (x.Key == Key.F12)
                {
                    await BlazorContentControlAccessor.Control.OpenDevTools();
                    x.Handled = true;
                }
            })
            .AddTo(Anchors);
    }

    private void ToggleWindowState()
    {
        //FIXME Does not work - due to StartDrag intercepting the focus, need to implement DOM event listener + Drag distance analysis
        if (DataContext.WindowState == WindowState.Normal)
        {
            DataContext.Maximize();
        }
        else if (DataContext.WindowState == WindowState.Maximized)
        {
            DataContext.Restore();
        }
    }

    private void StartDrag()
    {
        dragAnchor.Disposable = new CompositeDisposable()
        {
            Disposable.Create(() => { }),
            DataContext.EnableDragMove()
        };
    }

    private void HandleMouseDown(MouseEventArgs mouseEventArgs)
    {
        StartDrag();
    }

    private void StartResize(WindowResizeDirection direction)
    {
        dragAnchor.Disposable = new BlazorWindowEdgeResizeController(
            BlazorWindowAccessor.Window,
            BlazorContentControlAccessor.Control,
            direction);
    }

}