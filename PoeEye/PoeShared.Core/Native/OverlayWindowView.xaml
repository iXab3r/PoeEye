<native:TransparentWindow
    x:Class="PoeShared.Native.OverlayWindowView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:native="clr-namespace:PoeShared.Native"
    xmlns:wpf="clr-namespace:PoeShared.Scaffolding.WPF"
    xmlns:converters="http://schemas.kent.boogaart.com/converters"
    mc:Ignorable="d"
    ShowInTaskbar="False"
    d:DataContext="{d:DesignInstance native:OverlayWindowViewModel}"
    WindowStartupLocation="Manual"
    Focusable="False"
    IsTabStop="False"
    ShowActivated="False"
    SizeChanged="OverlayChildWindow_OnSizeChanged">

    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/PoeShared;component/Themes/Generic.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>

    <native:TransparentWindow.Style>
        <Style TargetType="{x:Type native:TransparentWindow}">
            <Setter Property="Background" Value="{x:Null}" />
            <Setter Property="BorderBrush" Value="{x:Null}" />
            <Setter Property="AllowsTransparency" Value="False" />
            <Setter Property="WindowStyle" Value="None" />
            <Setter Property="DataContext" Value="{Binding}" />
            <Setter Property="Left" Value="{Binding Content.Left, Mode=TwoWay}" />
            <Setter Property="Top" Value="{Binding Content.Top, Mode=TwoWay}" />
            <Setter Property="Width" Value="{Binding Content.Width, Mode=TwoWay}" />
            <Setter Property="Height" Value="{Binding Content.Height, Mode=TwoWay}" />
            <Setter Property="MaxWidth" Value="{Binding Content.MaxSize.Width, Mode=TwoWay}" />
            <Setter Property="MaxHeight" Value="{Binding Content.MaxSize.Height, Mode=TwoWay}" />
            <Setter Property="MinWidth" Value="{Binding Content.MinSize.Width, Mode=TwoWay}" />
            <Setter Property="MinHeight" Value="{Binding Content.MinSize.Height, Mode=TwoWay}" />
            <Setter Property="ResizeMode" Value="NoResize" />
            <Setter Property="SizeToContent" Value="{Binding Content.SizeToContent, Mode=OneWay}" />

            <Style.Triggers>
                <DataTrigger Binding="{Binding Content.IsLocked}" Value="False" />
            </Style.Triggers>
        </Style>
    </native:TransparentWindow.Style>

    <Grid>
        <Grid>
            <Border>
                <Grid TextBlock.Foreground="{StaticResource PoeFontBrush}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>

                    <!-- Header -->
                    <Grid Grid.Row="0" Height="36" Visibility="{Binding Content.EnableHeader, Converter={StaticResource TrueToVisibleFalseToCollapsedConverter}}">
                        <Border 
                            wpf:EnableDragHelper.EnableDrag="True"
                            Background="{StaticResource OverlayWindowTitleBackgroundBrushKey}"
                            BorderBrush="{StaticResource OverlayWindowBorderBrushKey}"
                            BorderThickness="1"
                            Visibility="{Binding Content.IsLocked, Converter={StaticResource TrueToHiddenFalseToVisibleConverter}}"
                            Margin="3,3,3,8">
                            <StackPanel Orientation="Horizontal">
                                <Button Command="{Binding Content.LockWindowCommand}" Width="30" Height="30">
                                    <Button.Style>
                                        <Style TargetType="{x:Type Button}"
                                               BasedOn="{StaticResource OverlayWindowCircleButtonStyleKey}">
                                            <Setter Property="Content" Value="&#xf09c;" />
                                            <Setter Property="Foreground" Value="Red" />
                                            <Setter Property="Padding" Value="0,2,0,0" />
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Content.IsLocked}" Value="True" />

                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Content" Value="&#xf023;" />
                                                    <Setter Property="Foreground" Value="GreenYellow" />
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Button.Style>

                                    <Button.Triggers>
                                        <EventTrigger RoutedEvent="Mouse.MouseEnter">
                                            <EventTrigger.EnterActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation
                                                            Storyboard.TargetName="TradeMonitorBackground"
                                                            Storyboard.TargetProperty="Opacity"
                                                            From="1"
                                                            To="0.1"
                                                            Duration="0:0:1" />
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </EventTrigger.EnterActions>
                                        </EventTrigger>
                                        <EventTrigger RoutedEvent="Mouse.MouseLeave">
                                            <EventTrigger.EnterActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation
                                                            Storyboard.TargetName="TradeMonitorBackground"
                                                            Storyboard.TargetProperty="Opacity"
                                                            To="1"
                                                            Duration="0:0:1" />
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </EventTrigger.EnterActions>
                                        </EventTrigger>
                                    </Button.Triggers>
                                </Button>
                                <TextBlock Style="{StaticResource OverlayWindowTextBlockStyleKey}"
                                           Text="{Binding Content.Title}"
                                           Foreground="#EEC64C"
                                           HorizontalAlignment="Center"
                                           FontWeight="Bold" />
                            </StackPanel>
                        </Border>
                    </Grid>

                    <Border Grid.Row="1"
                            BorderBrush="{StaticResource OverlayWindowBorderBrushKey}"
                            BorderThickness="1"
                            Visibility="{Binding Content.IsLocked, Converter={StaticResource TrueToHiddenFalseToVisibleConverter}}" />

                    <!-- Body -->
                    <native:ContentControlEx Grid.Row="1"
                                    Location="{Binding Content.ViewModelLocation, Mode=OneWayToSource}"
                                    Content="{Binding Content}"
                                    ContentTemplate="{Binding ContentTemplate}" />
                </Grid>
            </Border>

            <Border
                Visibility="{Binding ShowWireframes, Converter={StaticResource TrueToVisibleFalseToCollapsedConverter}}"
                BorderThickness="3"
                IsHitTestVisible="False"
                BorderBrush="GreenYellow"
                Background="#aa000000">
                <StackPanel Orientation="Vertical">
                    <StackPanel.Resources>
                        <Style TargetType="{x:Type TextBlock}"
                               BasedOn="{StaticResource {x:Type TextBlock}}">
                            <Setter Property="Foreground" Value="Red" />
                            <Setter Property="FontWeight" Value="Bold" />
                        </Style>
                    </StackPanel.Resources>
                    <TextBlock Foreground="Yellow"
                               Text="{Binding Content.Title, TargetNullValue='Title is not set'}"
                               FontSize="14" />
                    <TextBlock Foreground="Yellow"
                               Text="{Binding Content, Converter={StaticResource ObjectToTypeConverter}}"
                               FontSize="14" />
                    <TextBlock
                        Margin="5,0"
                        Text="{Binding Content.IsLocked, StringFormat='IsLocked: {0}'}" />

                    <StackPanel Orientation="Horizontal">
                        <TextBlock
                            Margin="5,0"
                            Text="{Binding Content.Left, StringFormat='X: {0:F0}'}" />

                        <TextBlock
                            Margin="5,0"
                            Text="{Binding Content.Top, StringFormat='Y: {0:F0}'}" />
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock
                            Margin="5,0"
                            Text="{Binding Content.Width, StringFormat='Width: {0:F0}'}" />

                        <TextBlock
                            Margin="5,0"
                            Text="{Binding Content.Height, StringFormat='Height: {0:F0}'}" />
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock
                            Margin="5,0"
                            Text="{Binding Content.ActualWidth, StringFormat='ActualWidth: {0:F0}'}" />

                        <TextBlock
                            Margin="5,0"
                            Text="{Binding Content.ActualHeight, StringFormat='ActualHeight: {0:F0}'}" />
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock
                            Margin="5,0"
                            Text="{Binding Content.MinSize.Width, StringFormat='MinWidth: {0:F0}'}" />

                        <TextBlock
                            Margin="5,0"
                            Text="{Binding Content.MinSize.Height, StringFormat='MinHeight: {0:F0}'}" />
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock
                            Margin="5,0"
                            Text="{Binding Content.MaxSize.Width, StringFormat='MaxWidth: {0:F0}'}" />

                        <TextBlock
                            Margin="5,0"
                            Text="{Binding Content.MaxSize.Height, StringFormat='MaxHeight: {0:F0}'}" />
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock
                            Margin="5,0"
                            Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=SizeToContent, StringFormat='SizeToContent: {0}'}" />
                    </StackPanel>

                </StackPanel>
            </Border>
        </Grid>

        <Grid>
            <Grid.Visibility>
                <Binding Path="Content.SizeToContent">
                    <Binding.Converter>
                        <converters:MapConverter FallbackBehavior="ReturnFallbackValue" FallbackValue="{x:Static Visibility.Visible}">
                            <converters:Mapping From="{x:Static SizeToContent.WidthAndHeight}" To="{x:Static Visibility.Collapsed}" />
                        </converters:MapConverter>
                    </Binding.Converter>
                </Binding>
            </Grid.Visibility>
            <Thumb HorizontalAlignment="Right" VerticalAlignment="Bottom" Width="20" Height="20" Cursor="SizeNWSE"
                   DragDelta="ThumbResize_OnDragDelta"
                   Style="{StaticResource OverlayThumbStyleKey}"
                   Visibility="{Binding Content.IsLocked, Converter={StaticResource TrueToCollapsedFalseToVisibleConverter}}"
                   Tag="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" />
        </Grid>
    </Grid>

</native:TransparentWindow>