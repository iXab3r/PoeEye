<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:s="clr-namespace:PoeShared.Scaffolding.WPF">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/PoeShared;component/Themes/Converters.xaml" />
        <ResourceDictionary Source="pack://application:,,,/PoeShared;component/Themes/Colors.xaml" />
        <ResourceDictionary Source="pack://application:,,,/PoeShared;component/Themes/Styles.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/materialdesigncolor.lightblue.named.xaml" />

    </ResourceDictionary.MergedDictionaries>
    
    <Style x:Key="CommandWrapperIconButton" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource MaterialDesignFlatButton}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Width" Value="48" />
        <Setter Property="Height" Value="48" />
        
        <Setter Property="materialDesign:ButtonProgressAssist.IsIndicatorVisible" Value="False" />
        <Setter Property="materialDesign:ButtonProgressAssist.Opacity" Value=".8" />
        <Setter Property="materialDesign:ButtonProgressAssist.IndicatorForeground" Value="{DynamicResource PrimaryHueMidForegroundBrush}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False"
                                          x:Name="ButtonContent"
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                         HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                         VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        
                        <ProgressBar x:Name="ProgressBar"
                                     Style="{StaticResource MaterialDesignCircularProgressBar}"
                                     Minimum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.Minimum)}"
                                     Maximum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.Maximum)}"
                                     Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.IndicatorForeground)}"
                                     Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.IndicatorBackground)}"
                                     Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.Value)}"
                                     IsIndeterminate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.IsIndeterminate)}"
                                     Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.IsIndicatorVisible), Converter={StaticResource BooleanToVisibilityConverter}}"
                                     Height="{TemplateBinding Height}"
                                     Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ButtonBase}}, Path=ActualWidth}"
                                     Opacity="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.Opacity)}"
                                     HorizontalAlignment="Left"
                                     VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.23" TargetName="ButtonContent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type materialDesign:PackIcon}"
           x:Key="CommandWrapperErrorIndicatorErrorStyleKey">
        
        <Setter Property="Visibility" Value="Collapsed" />
        <Setter Property="Opacity" Value="1" />
        <Setter Property="Foreground" Value="IndianRed" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ToolTip" Value="{Binding Error}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />

        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Error}" Value="{x:Null}" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Collapsed}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.EnterActions>

                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetProperty="Opacity"
                                To="0"
                                Duration="0:0:15" />

                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}" />
                                <DiscreteObjectKeyFrame KeyTime="0:0:15" Value="{x:Static Visibility.Collapsed}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>
        </Style.Triggers>

    </Style>

    <Style TargetType="{x:Type materialDesign:PackIcon}"
           x:Key="CommandWrapperErrorIndicatorSuccessStyleKey">
        
        <Setter Property="Visibility" Value="Collapsed" />
        <Setter Property="Opacity" Value="1" />
        <Setter Property="Foreground" Value="LimeGreen" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />

        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="True">
                        <Condition.Binding>
                            <MultiBinding Converter="{StaticResource MultiBooleanOrConverter}">
                                <Binding Path="IsBusy" />
                                <Binding Path="Error" Converter="{StaticResource IsNotNullOrEmptyConverter}" />
                            </MultiBinding>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Collapsed}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.EnterActions>

                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetProperty="Opacity"
                                From="1"
                                To="0"
                                Duration="0:0:1" />
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}" />
                                <DiscreteObjectKeyFrame KeyTime="0:0:1" Value="{x:Static Visibility.Collapsed}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style TargetType="{x:Type Grid}" x:Key="CommandWrapperGridStyleKey">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="TextElement.Foreground" Value="{StaticResource MouseOverAccentBrushKey}"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <DataTemplate DataType="{x:Type s:CommandWrapper}" x:Key="CommandWrapperIcon">
        <Grid x:Name="CommandWrapperGrid" Style="{StaticResource CommandWrapperGridStyleKey}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Button Grid.Column="0"
                Style="{StaticResource CommandWrapperIconButton}"
                Height="24" Width="24"
                Background="Transparent"
                BorderBrush="{x:Null}"
                Command="{Binding}"
                Focusable="False"
                IsTabStop="False"
                IsDefault="{Binding Path=(s:CommandWrapperHelper.IsDefault), RelativeSource={RelativeSource Self}}"
                CommandParameter="{Binding Path=(s:CommandWrapperHelper.CommandParameter), RelativeSource={RelativeSource Self}}"
                materialDesign:ButtonProgressAssist.IndicatorForeground="LimeGreen"
                materialDesign:ButtonProgressAssist.IsIndicatorVisible="{Binding IsBusy}"
                materialDesign:ButtonProgressAssist.IsIndeterminate="True"
                >
                <Button.Content>
                    <Label Style="{StaticResource IconLabel}"
                           Foreground="{Binding ElementName=CommandWrapperGrid, Path=(TextElement.Foreground), Mode=OneWay}"
                           Content="{Binding Path=(s:CommandWrapperHelper.Icon), RelativeSource={RelativeSource Self}}"
                           Visibility="{Binding Path=Content, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToCollapsedConverter}}" />
                </Button.Content>
            </Button>

            
            <materialDesign:PackIcon Grid.Column="0" x:Name="ErrorIcon" Kind="AlertCircleOutline" Style="{StaticResource CommandWrapperErrorIndicatorErrorStyleKey}"/>
            
            <Label Grid.Column="1" Margin="10,0,0,0"
                   Foreground="{Binding ElementName=CommandWrapperGrid, Path=(TextElement.Foreground), Mode=OneWay}"
                   Content="{Binding Path=(s:CommandWrapperHelper.Text), RelativeSource={RelativeSource Self}}"
                   Visibility="{Binding Path=Content, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToCollapsedConverter}}" />
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type s:CommandWrapper}">
        <Grid x:Name="CommandWrapperGrid"  Style="{StaticResource CommandWrapperGridStyleKey}">
            <Button Height="22"
                    Command="{Binding}"
                    Focusable="False"
                    IsDefault="{Binding Path=(s:CommandWrapperHelper.IsDefault), RelativeSource={RelativeSource Self}}"
                    HorizontalAlignment="Stretch"
                    CommandParameter="{Binding Path=(s:CommandWrapperHelper.CommandParameter), RelativeSource={RelativeSource Self}}">
                <Button.Content>
                    <DockPanel>
                        <Label Style="{StaticResource IconLabel}"
                               Foreground="{Binding ElementName=CommandWrapperGrid, Path=(TextElement.Foreground), Mode=OneWay}"
                               Content="{Binding Path=(s:CommandWrapperHelper.Icon), RelativeSource={RelativeSource Self}}"
                               Margin="0,0,5,0"
                               Visibility="{Binding Path=Content, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToCollapsedConverter}}" />
                        <Label Padding="0"
                               Foreground="{Binding ElementName=CommandWrapperGrid, Path=(TextElement.Foreground), Mode=OneWay}"
                               Content="{Binding Path=(s:CommandWrapperHelper.Text), RelativeSource={RelativeSource Self}}"
                               Visibility="{Binding Path=Content, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToCollapsedConverter}}" />
                    </DockPanel>
                </Button.Content>
            </Button>

            <ProgressBar Style="{StaticResource MaterialDesignCircularProgressBar}"
                         Value="0"
                         HorizontalAlignment="Right" VerticalAlignment="Center"
                         Visibility="{Binding IsBusy, Converter={StaticResource TrueToVisibleFalseToCollapsedConverter}}"
                         IsIndeterminate="True" />
            
            <materialDesign:PackIcon x:Name="ErrorIcon" Kind="AlertCircleOutline"  HorizontalAlignment="Right" 
                                     Style="{StaticResource CommandWrapperErrorIndicatorErrorStyleKey}"/>
            <materialDesign:PackIcon x:Name="SuccessIcon" Kind="CheckboxMarked"  HorizontalAlignment="Right" 
                                     Style="{StaticResource CommandWrapperErrorIndicatorSuccessStyleKey}"/>
        </Grid>
    </DataTemplate>

</ResourceDictionary>