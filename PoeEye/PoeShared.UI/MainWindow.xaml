<eye:DpiAwareMetroWindow x:Class="PoeShared.UI.MainWindow"
                         xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                         xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                         xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                         xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                         xmlns:local="clr-namespace:PoeShared.UI"
                         xmlns:st="http://schemas.spicytaco.io/"
                         xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                         mc:Ignorable="d"
                         xmlns:eye="http://coderush.net/poeeye/"
                         xmlns:system="clr-namespace:System;assembly=System.Runtime"
                         WindowStartupLocation="CenterScreen"
                         UseLayoutRounding="True"
                         ShowIconOnTitleBar="True"
                         RenderOptions.EdgeMode="Aliased"
                         Title="PoeShared Demo" Height="750" Width="800" d:DataContext="{d:DesignInstance local:MainWindowViewModel}">
    <Grid>
        <TabControl>
            <TabItem Header="AutoComplete">
                <eye:CachedContentControl Content="{Binding AutoCompleteSandbox}" />
            </TabItem>
            <TabItem Header="Blazor">
                <eye:CachedContentControl Content="{Binding BlazorSandbox}" />
            </TabItem>
            <TabItem Header="Bindings">
                <eye:CachedContentControl Content="{Binding BindingsSandbox}" />
            </TabItem>
            <TabItem Header="Exceptions">
                <eye:CachedContentControl Content="{Binding ExceptionSandbox}" />
            </TabItem>
            <TabItem Header="Misc">
                <ScrollViewer VerticalScrollBarVisibility="Auto">
                    
                    <st:StackPanel Orientation="Vertical">
                        <GroupBox Header="Color picker">
                            <st:StackPanel MarginBetweenChildren="5" Orientation="Horizontal">
                                <eye:ColorPickerEx x:Name="ColorPickerEx" Color="{Binding Color}" PickerDock="Right" />
                                <eye:ColorPickerEx Color="{Binding Color}" PickerDock="Left" />
                                <CheckBox IsChecked="{Binding ElementName=ColorPickerEx, Path=AllowAlpha}" Content="Allow alpha" />
                                <TextBlock Text="{Binding ElementName=ColorPickerEx, Path=ColorWithoutAlpha, Converter={StaticResource ColorToStringConverter}, StringFormat='Color w/Alpha: {0}'}" />
                                <TextBlock Text="{Binding ElementName=ColorPickerEx, Path=Alpha, StringFormat='Alpha: {0}'}" />
                            </st:StackPanel>
                        </GroupBox>
                        
                        <GroupBox Header="Numeric up/down">
                            <st:StackPanel MarginBetweenChildren="5" Orientation="Horizontal">
                                <eye:NumericUpDownEx Value="100" Width="100" IsMouseDragEnabled="True" />
                                <eye:NumericUpDownEx Value="1000" Width="100" />
                            </st:StackPanel>
                        </GroupBox>
                        
                        <GroupBox Header="Random period selector">
                            <st:StackPanel MarginBetweenChildren="5" Orientation="Horizontal">
                                <eye:CachedContentControl Content="{Binding RandomPeriodSelector}" />
                                <eye:ButtonEx Content="Next" Command="{Binding NextRandomPeriodCommand}" />
                                <TextBlock Text="{Binding RandomPeriod}" />
                            </st:StackPanel>
                        </GroupBox>
                        <GroupBox Header="Fallback">
                            <st:StackPanel MarginBetweenChildren="5" Orientation="Horizontal">
                                <TextBox MinWidth="120" Text="{Binding FallbackValue.Value}" materialDesign:TextFieldAssist.SuffixText="value" />
                                <TextBox MinWidth="120" Text="{Binding FallbackValue.DefaultValue}" materialDesign:TextFieldAssist.SuffixText="default" />
                                <TextBlock Text="{Binding FallbackValue.Value, StringFormat='Value: {0}'}" />
                                <TextBlock Text="{Binding FallbackValue.ActualValue, StringFormat='Actual: {0}'}" />
                                <TextBlock Text="{Binding FallbackValue.HasActualValue, StringFormat='HasValue: {0}'}" />
                                <TextBlock Text="{Binding FallbackValue.DefaultValue, StringFormat='Default: {0}'}" />
                            </st:StackPanel>
                        </GroupBox>
                        <GroupBox Header="Box with hint">
                            <st:StackPanel Orientation="Horizontal">
                                <TextBlock Text="" />
                                <TextBox materialDesign:HintAssist.Hint="With hint" />
                                <TextBlock Text="Box without hint" />
                                <TextBox />
                            </st:StackPanel>
                        </GroupBox>
                        <GroupBox Header="Audio notification selector">
                            <st:StackPanel Orientation="Horizontal" >
                                <eye:CachedContentControl Content="{Binding AudioNotificationSelector}"
                                                          Height="32" Width="32"
                                                          ContentTemplate="{StaticResource AudioNotificationSelectorButtonTemplate}" />
                                <eye:CachedContentControl Content="{Binding AudioNotificationSelector}"
                                                          Width="200"/>
                            </st:StackPanel>
                        </GroupBox>
                        <GroupBox Header="Outlined Textblock">
                            <st:StackPanel Orientation="Vertical">
                                <st:StackPanel Orientation="Horizontal">
                                    <TextBox x:Name="OutlinedTextBlockText"
                                             Text="Outlined text"
                                             AcceptsReturn="True" />
                                    <eye:ColorPickerEx x:Name="OutlinedTextBlockStrokeColor"
                                                       Color="Green"
                                                       PickerDock="Left" />
                                    <eye:ColorPickerEx x:Name="OutlinedTextBlockColor"
                                                       Color="Red"
                                                       PickerDock="Left" />
                                    <eye:NumericUpDownEx x:Name="OutlinedTextBlockStrokeThickness"
                                                         Value="1"/>
                                    <eye:NumericUpDownEx x:Name="OutlinedTextBlockFontSize"
                                                         Value="32"/>
                                </st:StackPanel>

                                <Border Background="Black">
                                    <eye:OutlinedTextBlock Text="{Binding ElementName=OutlinedTextBlockText, Path=Text}"
                                                           FontSize="{Binding ElementName=OutlinedTextBlockFontSize, Path=Value}"
                                                           Stroke="{Binding ElementName=OutlinedTextBlockStrokeColor, Path=Color, Converter={StaticResource ColorToSolidColorBrushConverter}}"
                                                           Foreground="{Binding ElementName=OutlinedTextBlockColor, Path=Color, Converter={StaticResource ColorToSolidColorBrushConverter}}"
                                                           StrokeThickness="{Binding ElementName=OutlinedTextBlockStrokeThickness, Path=Value}" />
                                </Border>
                            </st:StackPanel>
                        </GroupBox>
                        <GroupBox Header="Cached content control">
                            <st:StackPanel Orientation="Horizontal" MarginBetweenChildren="5">
                                <eye:CachedContentControl Content="{Binding FakeDelay}" BorderBrush="Red" BorderThickness="1" Width="100" />
                                <TextBlock Text="LOADED" Visibility="{Binding FakeDelay, Converter={StaticResource NullToCollapsedConverter}}" Width="120" />
                                <TextBlock Text="NOT LOADED" Visibility="{Binding FakeDelay, Converter={StaticResource NotNullToCollapsedConverter}}" Width="120" />
                                <Button Content="NULL" Command="{Binding SetCachedControlContentCommand}" CommandParameter="{x:Null}" Width="80" />
                                <Button Content="Alpha" Command="{Binding SetCachedControlContentCommand}" CommandParameter="Alpha" Width="80" />
                                <Button Content="Beta" Command="{Binding SetCachedControlContentCommand}" CommandParameter="Beta" Width="80" />
                                <Button Content="#1" Command="{Binding SetCachedControlContentCommand}">
                                    <Button.CommandParameter>
                                        <system:Int32>
                                            1
                                        </system:Int32>
                                    </Button.CommandParameter>
                                </Button>
                                <Button Content="#2" Command="{Binding SetCachedControlContentCommand}" Width="80">
                                    <Button.CommandParameter>
                                        <system:Int32>
                                            2
                                        </system:Int32>
                                    </Button.CommandParameter>
                                </Button>
                            </st:StackPanel>
                        </GroupBox>
                        <GroupBox Header="Combobox">
                            <ComboBox Width="200">
                                <ComboBoxItem>Item 1</ComboBoxItem>
                                <ComboBoxItem>Item 2</ComboBoxItem>
                                <ComboBoxItem>Item 3</ComboBoxItem>
                                <ComboBoxItem>Item 4</ComboBoxItem>
                                <ComboBoxItem>Item 5</ComboBoxItem>
                                <ComboBoxItem>Item 6</ComboBoxItem>
                                <ComboBoxItem>Item 7</ComboBoxItem>
                                <ComboBoxItem>Item 8</ComboBoxItem>
                                <ComboBoxItem>Item 9</ComboBoxItem>
                                <ComboBoxItem>Item 10</ComboBoxItem>
                                <ComboBoxItem>Item 11</ComboBoxItem>
                                <ComboBoxItem>Item 12</ComboBoxItem>
                                <ComboBoxItem>Item 13</ComboBoxItem>
                                <ComboBoxItem>Item 14</ComboBoxItem>
                                <ComboBoxItem>Item 15</ComboBoxItem>
                                <ComboBoxItem>Item 16</ComboBoxItem>
                                <ComboBoxItem>Item 17</ComboBoxItem>
                                <ComboBoxItem>Item 18</ComboBoxItem>
                            </ComboBox>
                        </GroupBox>
                    </st:StackPanel>
                </ScrollViewer>
            </TabItem>
            <TabItem Header="SelectionAdorner">
                <st:StackPanel MarginBetweenChildren="5" Orientation="Vertical" Fill="Fill">
                    <st:StackPanel Orientation="Horizontal" MarginBetweenChildren="5">
                        <eye:ButtonEx Command="{Binding SelectRegionCommnad}">Select Window</eye:ButtonEx>
                        <TextBlock Text="{Binding SelectedRegion}"></TextBlock>
                    </st:StackPanel>

                    <st:StackPanel Orientation="Horizontal" MarginBetweenChildren="5">
                        <eye:ButtonEx Command="{Binding StartSelectionCommand}">Start selection</eye:ButtonEx>
                        <CheckBox IsChecked="{Binding SelectionAdorner.ShowCrosshair}">Show crosshair</CheckBox>
                        <CheckBox IsChecked="{Binding SelectionAdorner.ShowBackground}">Show background</CheckBox>
                        <TextBlock Text="Rect"></TextBlock>
                        <TextBlock Text="{Binding SelectionRect}"></TextBlock>
                        <TextBlock Text="Rectangle"></TextBlock>
                        <TextBlock Text="{Binding SelectionRectangle}"></TextBlock>
                    </st:StackPanel>
                    <eye:AdornedControl
                        IsAdornerVisible="True">
                        <eye:AdornedControl.AdornerContent>
                            <Grid>
                                <eye:CachedContentControl Content="{Binding SelectionAdorner}" />
                            </Grid>
                        </eye:AdornedControl.AdornerContent>
                        <Grid>
                            <Rectangle Fill="Gray" Stroke="Red" MinHeight="600" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                        </Grid>
                    </eye:AdornedControl>
                </st:StackPanel>
            </TabItem>
            <TabItem Header="Colors">
                <st:StackPanel MarginBetweenChildren="5" Orientation="Vertical">
                    <Label Background="{DynamicResource MaterialDesignBody}" Content="Body"></Label>
                    <Label Background="{DynamicResource MaterialDesignDivider}" Content="Divider"></Label>
                    <Label Background="{DynamicResource PrimaryHueDarkForegroundBrush}" Content="PrimaryHueDarkForegroundBrush"></Label>
                    <Label Background="{DynamicResource SecondaryAccentForegroundBrush}" Content="SecondaryAccentForegroundBrush"></Label>
                    <Label Background="{DynamicResource PrimaryHueLightForegroundBrush}" Content="PrimaryHueLightForegroundBrush"></Label>
                    <Label Background="{DynamicResource PrimaryHueMidForegroundBrush}" Content="PrimaryHueMidForegroundBrush"></Label>
                    <Label Background="{DynamicResource PrimaryHueDarkForegroundBrush}" Content="PrimaryHueDarkForegroundBrush"></Label>
                    <Label Background="{DynamicResource PrimaryHueLightBrush}" Content="PrimaryHueLightBrush"></Label>
                    <Label Background="{DynamicResource PrimaryHueMidBrush}" Content="PrimaryHueMidBrush"></Label>
                    <Label Background="{DynamicResource PrimaryHueDarkBrush}" Content="PrimaryHueDarkBrush"></Label>
                    <Label Background="{DynamicResource MaterialDesignPaper}" Content="MaterialDesignPaper"></Label>
                    <Label Background="{DynamicResource MaterialDesignTextBoxBorder}" Content="MaterialDesignTextBoxBorder"></Label>
                    <Label Background="{DynamicResource MaterialDesignSelection}" Content="MaterialDesignSelection"></Label>
                    <Label Background="{DynamicResource MaterialDesignCheckBoxOff}" Content="MaterialDesignCheckBoxOff"></Label>
                    <Label Background="{DynamicResource MaterialDesignFlatButtonClick}" Content="MaterialDesignFlatButtonClick"></Label>
                    <Label Background="{DynamicResource MaterialDesignValidationErrorBrush}" Content="MaterialDesignValidationErrorBrush"></Label>
                    <Label Background="{DynamicResource MahApps.Brushes.Accent}" Content="MahApps.Brushes.Accent"></Label>
                    <Label Background="{DynamicResource MahApps.Brushes.ThemeForeground}" Content="MahApps.Brushes.ThemeForeground"></Label>
                    <Label Background="{DynamicResource MahApps.Brushes.ThemeBackground}" Content="MahApps.Brushes.ThemeBackground"></Label>
                    <Label Background="{DynamicResource MahApps.Brushes.Gray8}" Content="MahApps.Brushes.Gray8"></Label>
                    <Label Background="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" Content="InactiveSelectionHighlightBrushKey"></Label>
                </st:StackPanel>
            </TabItem>
            <TabItem Header="BusyIndicator">
                <local:AdornerTest />
            </TabItem>
            <TabItem Header="Notifications">
                <eye:CachedContentControl Content="{Binding NotificationSandbox}" />
            </TabItem>
            <TabItem Header="HotkeySequence">
                <st:StackPanel Fill="Fill" Orientation="Vertical" MarginBetweenChildren="5" VerticalAlignment="Stretch">

                    <st:AutoGrid Columns="150,Auto" Rows="*" ChildMargin="5">

                        <TextBlock Text="Hide keypress delays" />
                        <CheckBox IsChecked="{Binding HotkeySequenceEditor.HideKeypressDelays}" />
                        <TextBlock Text="Mouse position recording" />
                        <st:StackPanel Orientation="Horizontal" MarginBetweenChildren="5">
                            <RadioButton
                                IsChecked="{Binding HotkeySequenceEditor.Controller.MousePositionRecording, Converter={StaticResource EqualToTrueConverter}, ConverterParameter={x:Static eye:MousePositionRecordingType.None}}"
                                Content="{x:Static eye:MousePositionRecordingType.None}">
                            </RadioButton>
                            <RadioButton
                                IsChecked="{Binding Path=HotkeySequenceEditor.Controller.MousePositionRecording, Converter={StaticResource EqualToTrueConverter}, ConverterParameter={x:Static eye:MousePositionRecordingType.Absolute}}"
                                Content="{x:Static eye:MousePositionRecordingType.Absolute}">
                            </RadioButton>
                            <RadioButton
                                IsChecked="{Binding Path=HotkeySequenceEditor.Controller.MousePositionRecording, Converter={StaticResource EqualToTrueConverter}, ConverterParameter={x:Static eye:MousePositionRecordingType.Relative}}"
                                Content="{x:Static eye:MousePositionRecordingType.Relative}">
                            </RadioButton>
                        </st:StackPanel>
                        <TextBlock Text="Mouse clicks recording" />
                        <CheckBox IsChecked="{Binding HotkeySequenceEditor.Controller.EnableMouseClicksRecording}" />
                        <TextBlock Text="Key clicks recording" />
                        <CheckBox IsChecked="{Binding HotkeySequenceEditor.Controller.EnableKeyboardRecording}" />

                        <TextBlock Text="Total duration" />
                        <TextBlock Text="" />

                        <TextBlock Text="Item count" />
                        <TextBlock Text="{Binding HotkeySequenceEditor.Items.Count}" />

                        <TextBlock Text="Stop recording hotkey" />
                        <eye:HotKeyBox
                            AcceptsModifiers="False"
                            AcceptsTab="False"
                            AcceptsMouseKeys="False"
                            AcceptsMouseWheel="False"
                            HotKey="{Binding HotkeySequenceEditor.Controller.ToggleRecordingHotkey.DefaultValue}" />

                        <TextBlock Text="MaxDuration" />
                        <eye:NumericUpDownEx
                            Interval="1000"
                            Value="{Binding HotkeySequenceEditor.MaxDuration, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource TimeSpanToMillisecondsConverter}}" />

                        <TextBlock Text="Key Press Duration" />
                        <eye:NumericUpDownEx
                            Interval="50"
                            Value="{Binding HotkeySequenceEditor.DefaultKeyPressDuration, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource TimeSpanToMillisecondsConverter}}" />

                        <TextBlock Text="MousePositionRecordingResolution" />
                        <eye:NumericUpDownEx
                            Interval="100"
                            Value="{Binding HotkeySequenceEditor.Controller.MousePositionRecordingResolution, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource TimeSpanToMillisecondsConverter}}" />
                    </st:AutoGrid>

                    <eye:CachedContentControl Content="{Binding HotkeySequenceEditor}" Margin="10" />
                </st:StackPanel>
            </TabItem>
            <TabItem Header="ButtonEx">
                <StackPanel>
                    <eye:ButtonEx Content="OK"
                                  Icon="&#xf1fb;"
                                  Command="{Binding LongCommand}" />

                    <eye:ButtonEx Icon="&#xf00d;" Content="With Icon" Command="{Binding LongCommand}" />
                    <eye:ButtonEx Icon="&#xf00d;" Command="{Binding LongCommand}" />

                    <eye:ButtonEx Content="Error" Command="{Binding ErrorCommand}" />
                    <eye:ButtonEx Icon="&#xf00d;" Command="{Binding ErrorCommand}" />
                </StackPanel>
            </TabItem>
        </TabControl>
    </Grid>
</eye:DpiAwareMetroWindow>