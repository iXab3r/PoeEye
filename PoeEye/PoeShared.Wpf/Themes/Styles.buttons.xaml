<eye:SharedResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                             xmlns:wpf="http://materialdesigninxaml.net/winfx/xaml/themes"
                             xmlns:eye="clr-namespace:PoeShared.UI">
    <eye:SharedResourceDictionary.MergedDictionaries>
        <eye:SharedResourceDictionary Source="pack://application:,,,/PoeShared.Wpf;component/Themes/Converters.xaml" />
        <eye:SharedResourceDictionary Source="pack://application:,,,/PoeShared.Wpf;component/Themes/Colors.xaml" />
        <eye:SharedResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/materialdesigntheme.button.xaml" />
        <eye:SharedResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/materialdesigntheme.togglebutton.xaml" />
    </eye:SharedResourceDictionary.MergedDictionaries>

    <Style TargetType="{x:Type Button}" x:Key="InvisibleButtonStyleKey">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}" />
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToggleButton}" x:Key="ToggleCircleButton" BasedOn="{StaticResource MaterialDesignActionLightToggleButton}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Foreground" Value="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}, Converter={StaticResource TrueToPositiveFalseToWarningBrushConverter}}"/>
    </Style>
    
    <Style TargetType="{x:Type ToggleButton}" x:Key="FlatToggleButton" BasedOn="{StaticResource MaterialDesignFlatToggleButton}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Foreground" Value="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}, Converter={StaticResource TrueToPositiveFalseToWarningBrushConverter}}"/>
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="FlatButton"
           BasedOn="{StaticResource MaterialDesignFlatButton}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
    </Style>


    <Style TargetType="{x:Type Button}" x:Key="MaterialCircleButton"
           BasedOn="{StaticResource MaterialDesignFloatingActionMiniDarkButton}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="CircleButton" BasedOn="{StaticResource MaterialCircleButton}" />


    <Style TargetType="{x:Type Button}" x:Key="OverlayWindowButtonStyleKey" BasedOn="{StaticResource FlatButton}" />

    <Style TargetType="{x:Type Button}" x:Key="OverlayWindowCircleButtonStyleKey" BasedOn="{StaticResource OverlayWindowButtonStyleKey}">
        <Setter Property="FontSize" Value="16" />
    </Style>


    <Style x:Key="DefaultToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}" />
        <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="Width" Value="150" />
        <Setter Property="Height" Value="22" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="wpf:ShadowAssist.ShadowDepth" Value="Depth0" />
        <Setter Property="wpf:ToggleButtonAssist.OnContent" Value="{DynamicResource CheckMarkIcon}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid
                        Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ShadowAssist.ShadowDepth), Converter={x:Static wpf:ShadowConverter.Instance}}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.23" Storyboard.TargetProperty="(UIElement.Opacity)" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="*" To="Checked">
                                        <Storyboard FillBehavior="HoldEnd">
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform">
                                                <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.0" />
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform">
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                                <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.2" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="Checked" To="Unchecked">
                                        <Storyboard FillBehavior="HoldEnd">
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform">
                                                <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.0" />
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform">
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                                <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.2" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform"
                                                         To="0" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform"
                                                         To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform"
                                                         To="1" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform"
                                                         To="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="IndeterminateCheck" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid x:Name="OffGrid" RenderTransformOrigin=".5,.5" Background="{TemplateBinding Background}">
                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              FlowDirection="LeftToRight" />
                            <Grid.RenderTransform>
                                <ScaleTransform x:Name="OffScaleTransform" ScaleX="1" ScaleY="1" />
                            </Grid.RenderTransform>
                        </Grid>
                        <Grid x:Name="OnGrid" RenderTransformOrigin=".5,.5" Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              FlowDirection="LeftToRight"
                                              Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ToggleButtonAssist.OnContent)}"
                                              ContentTemplate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ToggleButtonAssist.OnContentTemplate)}" />
                            <Grid.RenderTransform>
                                <ScaleTransform x:Name="OnScaleTransform" ScaleX="0" ScaleY="1" />
                            </Grid.RenderTransform>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</eye:SharedResourceDictionary>