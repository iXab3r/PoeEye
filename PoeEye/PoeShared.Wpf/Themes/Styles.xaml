<ui:SharedResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                             xmlns:wpf="http://materialdesigninxaml.net/winfx/xaml/themes"
                             xmlns:system="clr-namespace:System;assembly=System.Runtime"
                             xmlns:ui="clr-namespace:PoeShared.UI"
                             xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
                             xmlns:wpf1="clr-namespace:PoeShared.Scaffolding.WPF">
    <ui:SharedResourceDictionary.MergedDictionaries>
        <ui:SharedResourceDictionary Source="pack://application:,,,/PoeShared.Wpf;component/Themes/Converters.xaml" />
        <ui:SharedResourceDictionary Source="pack://application:,,,/PoeShared.Wpf;component/Themes/Colors.xaml" />
        <ui:SharedResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/materialdesigntheme.defaults.xaml" />
    </ui:SharedResourceDictionary.MergedDictionaries>

    <Style TargetType="{x:Type Button}" x:Key="InvisibleButtonStyleKey">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}" />
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToggleButton}" x:Key="ToggleCircleButton" BasedOn="{StaticResource MaterialDesignActionLightToggleButton}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <Style TargetType="{x:Type Label}" x:Key="IconLabel">
        <Setter Property="FontFamily" Value="{StaticResource FontAwesome}" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="DefaultTextBlockStyleKey">
        <Setter Property="TextAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Height" Value="NaN" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="ToolTipService.ShowDuration" Value="{x:Static system:Int32.MaxValue}" />
        <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="0" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.66" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="IconTextBlock" BasedOn="{StaticResource DefaultTextBlockStyleKey}">
        <Setter Property="FontFamily" Value="{StaticResource FontAwesome}" />
        <Setter Property="FontSize" Value="14" />
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="InformationIconTextBlock" BasedOn="{StaticResource IconTextBlock}">
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Text" Value="&#xf05a;" />
        <Setter Property="IsHitTestVisible" Value="True" />
        <Setter Property="Foreground" Value="{StaticResource MouseOverAccentBrushKey}" />
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="ErrorIconTextBlock" BasedOn="{StaticResource IconTextBlock}">
        <Setter Property="Text" Value="&#xf06a;" />
        <Setter Property="Foreground" Value="{StaticResource NegativeBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="IsHitTestVisible" Value="True" />
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="WarningIconTextBlock" BasedOn="{StaticResource IconTextBlock}">
        <Setter Property="Text" Value="&#xf071;" />
        <Setter Property="Foreground" Value="{StaticResource WarningBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="IsHitTestVisible" Value="True" />
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="FlatButton"
           BasedOn="{StaticResource MaterialDesignFlatButton}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
    </Style>


    <Style TargetType="{x:Type Button}" x:Key="MaterialCircleButton"
           BasedOn="{StaticResource MaterialDesignFloatingActionMiniDarkButton}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="CircleButton" BasedOn="{StaticResource MaterialCircleButton}" />

    <Style TargetType="{x:Type TextBox}" x:Key="CircleTextBox">
        <Setter Property="FontFamily" Value="{StaticResource FontAwesome}" />
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="24" />
        <Setter Property="Height" Value="24" />
        <Setter Property="FontWeight" Value="DemiBold" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">

                    <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"
                          Margin="{TemplateBinding Padding}">
                        <Ellipse Fill="{TemplateBinding Background}"
                                 Stroke="{TemplateBinding BorderBrush}"
                                 StrokeThickness="{TemplateBinding BorderThickness}" />

                        <TextBlock Text="{TemplateBinding Text}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   Foreground="{TemplateBinding Foreground}"
                                   TextAlignment="{TemplateBinding TextAlignment}"
                                   TextWrapping="{TemplateBinding TextWrapping}"
                                   TextDecorations="{TemplateBinding TextDecorations}"
                                   FontSize="{TemplateBinding FontSize}"
                                   FontFamily="{TemplateBinding FontFamily}" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="TextChanged">
                            <BeginStoryboard>
                                <Storyboard />
                            </BeginStoryboard>

                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="OverlayWindowButtonStyleKey" BasedOn="{StaticResource FlatButton}" />

    <Style TargetType="{x:Type Button}" x:Key="OverlayWindowCircleButtonStyleKey" BasedOn="{StaticResource OverlayWindowButtonStyleKey}">
        <Setter Property="FontSize" Value="16" />
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="OverlayWindowTextBlockStyleKey">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.23" />

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation To="0.4" Storyboard.TargetProperty="Opacity" Duration="0:0:0.3" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation To="1" Storyboard.TargetProperty="Opacity" Duration="0:0:0.3" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="IconErrorValidationTemplate">
        <Border BorderBrush="{StaticResource NegativeBrush}" BorderThickness="0 0 0 2">
            <Grid>
                <TextBlock Style="{StaticResource IconTextBlock}" FontSize="14"
                           Background="Transparent"
                           HorizontalAlignment="Left"
                           IsHitTestVisible="True"
                           Text="&#xf06a;" Foreground="{StaticResource NegativeBrush}"
                           Margin="-15,0,0,0" VerticalAlignment="Center">
                    <TextBlock.ToolTip>
                        <ItemsControl ItemsSource="{Binding}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate DataType="{x:Type ValidationError}">
                                    <TextBlock Text="{Binding ErrorContent}" />
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </TextBlock.ToolTip>
                </TextBlock>
                <AdornedElementPlaceholder />
            </Grid>
        </Border>
    </ControlTemplate>

    <Style x:Key="DefaultToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}" />
        <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="Width" Value="150" />
        <Setter Property="Height" Value="22" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="wpf:ShadowAssist.ShadowDepth" Value="Depth0" />
        <Setter Property="wpf:ToggleButtonAssist.OnContent" Value="{DynamicResource CheckMarkIcon}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid
                        Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ShadowAssist.ShadowDepth), Converter={x:Static wpf:ShadowConverter.Instance}}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.23" Storyboard.TargetProperty="(UIElement.Opacity)" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="*" To="Checked">
                                        <Storyboard FillBehavior="HoldEnd">
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform">
                                                <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.0" />
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform">
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                                <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.2" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="Checked" To="Unchecked">
                                        <Storyboard FillBehavior="HoldEnd">
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform">
                                                <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.0" />
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform">
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                                <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.2" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform"
                                                         To="0" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform"
                                                         To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform"
                                                         To="1" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform"
                                                         To="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="IndeterminateCheck" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid x:Name="OffGrid" RenderTransformOrigin=".5,.5" Background="{TemplateBinding Background}">
                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              FlowDirection="LeftToRight" />
                            <Grid.RenderTransform>
                                <ScaleTransform x:Name="OffScaleTransform" ScaleX="1" ScaleY="1" />
                            </Grid.RenderTransform>
                        </Grid>
                        <Grid x:Name="OnGrid" RenderTransformOrigin=".5,.5" Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              FlowDirection="LeftToRight"
                                              Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ToggleButtonAssist.OnContent)}"
                                              ContentTemplate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ToggleButtonAssist.OnContentTemplate)}" />
                            <Grid.RenderTransform>
                                <ScaleTransform x:Name="OnScaleTransform" ScaleX="0" ScaleY="1" />
                            </Grid.RenderTransform>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FastTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="CaretBrush" Value="White" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border x:Name="PART_ContentHost"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="{TemplateBinding Padding}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="MinimalTextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource FastTextBoxStyle}" />

    <Style x:Key="DefaultTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0 0 0 1" />
        <Setter Property="CaretBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="Padding" Value="0, 4" />
        <Setter Property="Height" Value="32" />
        <Setter Property="wpf:TextFieldAssist.TextBoxViewMargin" Value="0" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource MaterialDesignValidationErrorTemplate}" />
        <Setter Property="wpf:HintAssist.Foreground" Value="{DynamicResource MaterialDesignBody}" />
        <Setter Property="wpf:HintAssist.IsFloating" Value="True" />
        <Setter Property="wpf:HintAssist.FloatingOffset" Value="1, -24" />
        <Setter Property="wpf:HintAssist.FontFamily" Value="{Binding RelativeSource={RelativeSource Self}, Path=FontFamily}" />
        <Setter Property="wpf:HintAssist.HelperTextFontSize">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource MultiplicationConverter}">
                    <Binding RelativeSource="{RelativeSource Self}" Path="FontSize" />
                    <Binding RelativeSource="{RelativeSource Self}" Path="(wpf:HintAssist.FloatingScale)" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="wpf:TextFieldAssist.DecorationVisibility" Value="Visible" />
        <Setter Property="wpf:TextFieldAssist.HasFilledTextField"
                Value="{Binding RelativeSource={RelativeSource Self}, Path=Text, Converter={StaticResource NullToFalseConverter}}" />
        <Setter Property="ContextMenu" Value="{StaticResource MaterialDesignDefaultContextMenu}" />
        <Setter Property="Cursor" Value="IBeam" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid
                        x:Name="TextBoxRoot"
                        MinWidth="1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <Border x:Name="PART_ContentHost"
                                Grid.Column="0"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Padding="{TemplateBinding Padding}" />

                        <TextBlock
                            x:Name="SuffixTextBlock"
                            Grid.Column="1"
                            FontSize="{TemplateBinding FontSize}"
                            Visibility="{TemplateBinding wpf:TextFieldAssist.SuffixText, Converter={StaticResource NullToCollapsedConverter}}"
                            Opacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                            Text="{TemplateBinding wpf:TextFieldAssist.SuffixText}" />

                        <TextBlock
                            Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="2"
                            x:Name="FloatingHint"
                            Margin="{TemplateBinding wpf:HintAssist.FloatingOffset, Converter={StaticResource PointToThicknessConverter}}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Opacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                            Foreground="{TemplateBinding wpf:HintAssist.Foreground}"
                            FontFamily="{TemplateBinding wpf:HintAssist.FontFamily}"
                            FontSize="{TemplateBinding wpf:HintAssist.HelperTextFontSize}"
                            FontWeight="Bold"
                            Text="{TemplateBinding wpf:HintAssist.Hint}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="wpf:TextFieldAssist.HasFilledTextField" Value="False">
                            <Setter Property="wpf:HintAssist.FloatingOffset" Value="1,0" />
                            <Setter Property="wpf:HintAssist.HelperTextFontSize">
                                <Setter.Value>
                                    <Binding RelativeSource="{RelativeSource Self}" Path="FontSize" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <!-- IsEnabled -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ContentHost" Property="BorderBrush" Value="Transparent" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ContentHost" Property="BorderThickness" Value="0 0 0 1" />
                            <Setter TargetName="PART_ContentHost" Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}" />
                        </MultiTrigger>

                        <!-- IsKeyboardFocused -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ContentHost" Property="BorderThickness" Value="0 0 0 2" />
                            <Setter TargetName="PART_ContentHost" Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
                        </MultiTrigger>

                        <!-- IsMouseOver -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ContentHost" Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
                    <Condition Property="IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>


    <Style TargetType="{x:Type ContentControl}">
        <Setter Property="Focusable" Value="False" />
    </Style>

    <Style TargetType="{x:Type TextBlock}"
           BasedOn="{StaticResource DefaultTextBlockStyleKey}" />

    <Style TargetType="{x:Type controls:WindowCommandsItem}">
        <Setter Property="FontFamily" Value="{StaticResource FontAwesome}" />
    </Style>

    <Style TargetType="{x:Type MenuItem}" x:Key="FastMenuItem" BasedOn="{x:Null}">
        <Setter Property="Padding" Value="8,3" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Command">
            <Setter.Value>
                <Binding RelativeSource="{RelativeSource Self}" Path="(wpf1:CommandWrapperHelper.Command)" />
            </Setter.Value>
        </Setter>
        <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}, Path=(wpf1:CommandWrapperHelper.CommandParameter)}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="Container"
                            Background="{TemplateBinding Background}"
                            Height="{TemplateBinding Height}">
                        <Grid
                            Margin="{TemplateBinding Padding}"
                            VerticalAlignment="Center">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="IconGroup" />
                                <ColumnDefinition Width="*" SharedSizeGroup="TextGroup" />
                                <ColumnDefinition Width="Auto" SharedSizeGroup="GestureGroup" />
                            </Grid.ColumnDefinitions>

                            <ContentPresenter Grid.Column="0" x:Name="IconPresenter"
                                              VerticalAlignment="Center"
                                              Visibility="{TemplateBinding Icon, Converter={StaticResource NullToCollapsedConverter}}"
                                              Content="{TemplateBinding Icon}" />

                            <ContentPresenter Grid.Column="1" x:Name="HeaderPresenter"
                                              Margin="{TemplateBinding Padding}"
                                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                                              Content="{TemplateBinding Header}"
                                              ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                              ContentSource="Header"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                            <ContentPresenter Grid.Column="2" x:Name="InputGesturePresenter"
                                              VerticalAlignment="Center"
                                              Visibility="{TemplateBinding InputGestureText, Converter={StaticResource NullToCollapsedConverter}}"
                                              Content="{TemplateBinding InputGestureText}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="wpf1:ContextMenuServiceExtensions.BindDataContextToMenuItemCommandParameter" Value="True">
                            <Setter Property="wpf1:CommandWrapperHelper.CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource Self}}"></Setter>
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".56" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource MaterialDesignContextMenu}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="FontFamily" Value="{StaticResource FontAwesome}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuBase}">
                    <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(wpf:ShadowAssist.CacheMode)}">
                        <Grid>
                            <Border Background="{TemplateBinding Background}" 
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="2" Effect="{DynamicResource MaterialDesignShadowDepth1}" />

                            <Border Margin="3" Background="Transparent">
                                <ScrollViewer x:Name="SubMenuScrollViewer"
                                              Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <ItemsPresenter x:Name="ItemsPresenter" Margin="{TemplateBinding Padding}"
                                                        KeyboardNavigation.DirectionalNavigation="Cycle"
                                                        Grid.IsSharedSizeScope="True"
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                        KeyboardNavigation.TabNavigation="Cycle" />
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                        </Grid>
                    </AdornerDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource FastMenuItem}" />

    <PopupAnimation x:Key="{x:Static SystemParameters.MenuPopupAnimationKey}">None</PopupAnimation>

    <Style TargetType="{x:Type ToggleButton}"
           BasedOn="{StaticResource DefaultToggleButton}">
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Margin" Value="0,4,0,0" />
    </Style>

    <Style TargetType="{x:Type Button}"
           BasedOn="{StaticResource MaterialDesignRaisedDarkButton}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Height" Value="24" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource MaterialDesignValidationErrorTemplate}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Viewbox Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:CheckBoxAssist.CheckBoxSize)}"
                                 Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:CheckBoxAssist.CheckBoxSize)}"
                                 VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                 FlowDirection="LeftToRight">
                            <Canvas Width="24" Height="24">
                                <Path x:Name="Graphic"
                                      Data="M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3M19,5V19H5V5H19Z"
                                      Fill="{DynamicResource MaterialDesignCheckBoxOff}" />
                                <Ellipse x:Name="InteractionEllipse" Fill="{TemplateBinding Foreground}" Width="0" Height="0" Canvas.Top="12" Canvas.Left="12" Opacity="0"
                                         RenderTransformOrigin="0.5,0.5"
                                         IsHitTestVisible="False">
                                    <Ellipse.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform />
                                            <SkewTransform />
                                            <RotateTransform />
                                            <TranslateTransform />
                                        </TransformGroup>
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Canvas>
                        </Viewbox>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true" />
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="Graphic"
                                    Value="M10,17L5,12L6.41,10.58L10,14.17L17.59,6.58L19,8M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3Z" />
                            <Setter Property="Fill" TargetName="Graphic" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="Graphic" Value="{DynamicResource MaterialDesignCheckBoxDisabled}" />
                            <Setter Property="Opacity" Value="0.56" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Data" TargetName="Graphic"
                                    Value="M6,13L6,11L18,11L18,13M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3Z" />
                            <Setter Property="Fill" TargetName="Graphic" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" />
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter Property="Fill" TargetName="Graphic" Value="{DynamicResource MaterialDesignValidationErrorBrush}" />
                            <Setter Property="Control.Foreground" TargetName="contentPresenter" Value="{DynamicResource MaterialDesignValidationErrorBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBoxStyle}" />

</ui:SharedResourceDictionary>