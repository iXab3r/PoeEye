<ui:SharedResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                          xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                          xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                          xmlns:st="http://schemas.spicytaco.io/"
                          xmlns:ui="clr-namespace:PoeShared.UI"
                          xmlns:scaffolding="clr-namespace:PoeShared.Scaffolding"
                          xmlns:eye="clr-namespace:PoeShared.Scaffolding.WPF">
    
    <ui:SharedResourceDictionary.MergedDictionaries>
        <ui:SharedResourceDictionary Source="pack://application:,,,/PoeShared.Wpf;component/Themes/Styles.xaml" />
    </ui:SharedResourceDictionary.MergedDictionaries>
    
    <Style TargetType="{x:Type ui:ColorPickerEx}" x:Key="ColorPickerWithPopupStyle">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Width" Value="125" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ui:ColorPickerEx}">
                    <Grid x:Name="colorPickerRoot">
                        <Popup x:Name="colorPopup" StaysOpen="False" Height="150"
                               Width="{Binding ElementName=colorPickerRoot, Path=ActualWidth}">
                            <Border BorderThickness="1" BorderBrush="{StaticResource MouseOverAccentBrushKey}">
                                <st:StackPanel Orientation="Vertical">
                                    <materialDesign:ColorPicker x:Name="colorPicker" st:StackPanel.Fill="Fill"
                                                                HueSliderPosition="{TemplateBinding HueSliderPosition}"
                                                                MinWidth="{TemplateBinding MinWidth}" MaxWidth="{TemplateBinding MaxWidth}"
                                                                Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ColorWithoutAlpha, Mode=TwoWay}">
                                    </materialDesign:ColorPicker>
                                    
                                    <st:StackPanel Orientation="Horizontal" Margin="10 5 5 5"
                                                   Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=AllowAlpha, Converter={StaticResource TrueToVisibleFalseToCollapsedConverter}}">
                                        <Slider st:StackPanel.Fill="Fill"
                                                VerticalAlignment="Center"
                                                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Alpha, Mode=TwoWay}"
                                                TickFrequency="10"
                                                IsSnapToTickEnabled="True"
                                                Minimum="{Binding ElementName=AlphaChannelEditBox, Path=Minimum}"
                                                Maximum="{Binding ElementName=AlphaChannelEditBox, Path=Maximum}"/>
                                        <ui:NumericUpDownEx
                                            materialDesign:HintAssist.Hint="Alpha"
                                            x:Name="AlphaChannelEditBox"
                                            MinWidth="40"
                                            Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Alpha}"
                                            Maximum="255" Minimum="0" Interval="1"/>
                                    </st:StackPanel>
                                </st:StackPanel>
                            </Border>
                        </Popup>

                        <DockPanel>
                            <ToggleButton Height="28" Width="28"
                                          Focusable="False" IsTabStop="False"
                                          Style="{StaticResource MaterialDesignFlatPrimaryToggleButton}"
                                          IsHitTestVisible="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked, Converter={StaticResource NotConverter}}"
                                          IsChecked="{Binding ElementName=colorPopup, Path=IsOpen}"
                                          DockPanel.Dock="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PickerDock}">
                                <Grid>
                                    <Ellipse Width="28" Height="28" StrokeThickness="1"
                                             Fill="{StaticResource CheckerboardBrushKey}" />
                                    <Ellipse Width="28" Height="28" StrokeThickness="1" Stroke="{StaticResource MouseOverAccentBrushKey}"
                                             Fill="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Color, Converter={StaticResource ColorToSolidColorBrushConverter}}" />
                                </Grid>
                            </ToggleButton>

                            <TextBox x:Name="colorBox"
                                     eye:FocusHelper.IsFocused="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsFocused}"
                                     materialDesign:HintAssist.Hint="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:HintAssist.Hint)}"
                                     Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Color, Converter={StaticResource ColorToStringConverter}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        </DockPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type ui:ColorPickerEx}" BasedOn="{StaticResource ColorPickerWithPopupStyle}"/>
</ui:SharedResourceDictionary>