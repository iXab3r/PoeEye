<ui:SharedResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                             xmlns:hotkeys="clr-namespace:PoeShared.UI.Hotkeys"
                             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                             xmlns:ui="clr-namespace:PoeShared.UI"
                             xmlns:dd="urn:gong-wpf-dragdrop"
                             xmlns:st="http://schemas.spicytaco.io/">
    <ui:SharedResourceDictionary.MergedDictionaries>
        <ui:SharedResourceDictionary Source="pack://application:,,,/PoeShared.Wpf;component/UI/Hotkeys/HotkeySequenceEditor.Defaults.xaml" />
        <ui:SharedResourceDictionary Source="pack://application:,,,/PoeShared.Wpf;component/UI/Hotkeys/HotkeySequenceEditor.Osd.xaml" />
        <ui:SharedResourceDictionary Source="pack://application:,,,/PoeShared.Wpf;component/UI/Hotkeys/HotkeySequenceEditor.Items.xaml" />
    </ui:SharedResourceDictionary.MergedDictionaries>

    <DataTemplate DataType="{x:Type hotkeys:HotkeySequenceActions}">
        <st:StackPanel MarginBetweenChildren="5" Orientation="Horizontal">
            <Image Source="pack://application:,,,/PoeShared.Wpf;component/Resources/DragDropWhite.png" ToolTip="Drag and drop items" Height="32" Width="32"/>
            <ui:ButtonEx
                Command="{Binding StartRecording}"
                Style="{StaticResource HotkeySequenceEditorButtonStyle}"
                HorizontalAlignment="Left" CornerRadius="5"
                Foreground="{StaticResource SequenceEditorTextForeground}"
                Visibility="{Binding IsRecording, Converter={StaticResource TrueToCollapsedFalseToVisibleConverter}}"
                Width="80"
                Background="{StaticResource SequenceEditorKeyBackground}">
                RECORD
                <ui:ButtonEx.Icon>
                    <Ellipse Width="10" Height="10" Fill="{StaticResource NegativeBrush}" Stroke="{StaticResource SequenceEditorTextForeground}" />
                </ui:ButtonEx.Icon>
            </ui:ButtonEx>
            <ui:ButtonEx
                Command="{Binding StopRecording}"
                Style="{StaticResource HotkeySequenceEditorButtonStyle}"
                HorizontalAlignment="Left" CornerRadius="5"
                Width="80"
                Foreground="{StaticResource NegativeBrush}"
                Visibility="{Binding IsRecording, Converter={StaticResource TrueToVisibleFalseToCollapsedConverter}}">
                STOP
                <ui:ButtonEx.Icon>
                    &#xf04d;
                </ui:ButtonEx.Icon>
            </ui:ButtonEx>
            <ui:ButtonEx
                Command="{Binding AddItem}"
                CommandParameter="{Binding DefaultItemDelay}"
                Style="{StaticResource HotkeySequenceEditorButtonStyle}"
                Icon="&#xf017;" HorizontalAlignment="Left" CornerRadius="5"
                dd:DragDrop.IsDragSource="True"
                Foreground="{StaticResource SequenceEditorTextForeground}" 
                Background="{StaticResource SequenceEditorDefaultBackground}">
                DELAY
            </ui:ButtonEx>
            <ui:ButtonEx
                Command="{Binding AddItem}"
                CommandParameter="{Binding DefaultItemText}"
                dd:DragDrop.IsDragSource="True"
                Style="{StaticResource HotkeySequenceEditorButtonStyle}"
                Icon="&#xf040;" HorizontalAlignment="Left" CornerRadius="5"
                Foreground="{StaticResource SequenceEditorTextForeground}" 
                Background="{StaticResource SequenceEditorTextBackground}">
                TEXT
            </ui:ButtonEx>
            <Separator />
            <ui:ButtonEx
                Command="{Binding ClearItems}"
                Style="{StaticResource HotkeySequenceEditorButtonStyle}"
                HorizontalAlignment="Left" CornerRadius="5"
                Icon="&#xf12d;"
                Foreground="{StaticResource SequenceEditorTextForeground}" 
                Background="{StaticResource SequenceEditorTextBackground}">
                CLEAR
            </ui:ButtonEx>
            <CheckBox
                x:Name="KeyboardPopupToggle">
                <TextBlock Style="{StaticResource IconTextBlock}" Text="&#xf11c; KEYBOARD" />
            </CheckBox>
            <CheckBox
                x:Name="KeyboardArrowBlockPopupToggle">
                <TextBlock Style="{StaticResource IconTextBlock}" Text="&#xf11c; ARROWS" />
            </CheckBox>
            <CheckBox
                x:Name="KeyboardSpecialsBlockPopupToggle">
                <TextBlock Style="{StaticResource IconTextBlock}" Text="&#xf11c; SPECIALS" />
            </CheckBox>

            <TextBlock HorizontalAlignment="Right" st:StackPanel.Fill="Fill"
                       x:Name="DurationLabel">
                <TextBlock.ToolTip>
                    <TextBlock HorizontalAlignment="Center">
                        <TextBlock.Text>
                            <MultiBinding Converter="{StaticResource StringFormatConverter}"
                                          ConverterParameter="{}Current duration: {0} / Max duration of macros: {1}">
                                <Binding Path="TotalDuration"
                                         Converter="{StaticResource TimeSpanToHumanReadableStringConverter}" />
                                <Binding Path="MaxDuration"
                                         Converter="{StaticResource TimeSpanToHumanReadableStringConverter}" />
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                </TextBlock.ToolTip>
                <TextBlock.Text>
                    <MultiBinding Converter="{StaticResource StringFormatConverter}" ConverterParameter="{}{0} / {1}">
                        <Binding Path="TotalDuration"
                                 Converter="{StaticResource TimeSpanToHumanReadableStringConverter}" />
                        <Binding Path="MaxDuration"
                                 Converter="{StaticResource TimeSpanToHumanReadableStringConverter}" />
                    </MultiBinding>
                </TextBlock.Text>
            </TextBlock>

            <materialDesign:PopupEx
                x:Name="KeyboardPopup"
                PlacementTarget="{Binding ElementName=KeyboardPopupToggle}"
                Placement="Top"
                StaysOpen="False"
                IsOpen="{Binding ElementName=KeyboardPopupToggle, Path=IsChecked}"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch">
                <ContentPresenter ContentTemplate="{StaticResource OnScreenKeyboard}" Content="{Binding}" />
            </materialDesign:PopupEx>
            <materialDesign:PopupEx
                x:Name="KeyboardArrowBlockPopup"
                PlacementTarget="{Binding ElementName=KeyboardArrowBlockPopupToggle}"
                Placement="Top"
                StaysOpen="False"
                IsOpen="{Binding ElementName=KeyboardArrowBlockPopupToggle, Path=IsChecked}"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch">
                <ContentPresenter ContentTemplate="{StaticResource OnScreenKeyboardArrowsAndNumpadBlock}" Content="{Binding}" />
            </materialDesign:PopupEx>
            <materialDesign:PopupEx
                x:Name="KeyboardSpecialsBlockPopup"
                PlacementTarget="{Binding ElementName=KeyboardArrowBlockPopupToggle}"
                Placement="Top"
                StaysOpen="False"
                IsOpen="{Binding ElementName=KeyboardSpecialsBlockPopupToggle, Path=IsChecked}"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch">
                <ContentPresenter ContentTemplate="{StaticResource OnScreenKeyboardSpecialsBlock}" Content="{Binding}" />
            </materialDesign:PopupEx>
        </st:StackPanel>
        
        <DataTemplate.Triggers>
            <DataTrigger
                Binding="{Binding MaxDurationExceeded}"
                Value="True">
                <Setter TargetName="DurationLabel" Property="Foreground" Value="{StaticResource NegativeBrush}" />
                <Setter TargetName="DurationLabel" Property="FontWeight" Value="Bold" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <Style x:Key="DefaultHotkeySequenceEditorStyle" TargetType="{x:Type hotkeys:HotkeySequenceEditor}">
        <Style.Resources>
            <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource HotkeySequenceCheckBoxStyle}" />
        </Style.Resources>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="dd:DragDrop.DropHandler" Value="{Binding DropTarget, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hotkeys:HotkeySequenceEditor}">
                    <st:StackPanel MarginBetweenChildren="10">
                        <ContentControl Content="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type hotkeys:HotkeySequenceEditor}}, Path=Actions}"/>
                        <ListView
                            x:Name="PART_ListBox"
                            Focusable="{TemplateBinding Focusable}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            ScrollViewer.VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
                            ScrollViewer.HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}"
                            FocusVisualStyle="{x:Null}"
                            dd:DragDrop.DropHandler="{TemplateBinding DropTarget}"
                            dd:DragDrop.IsDragSource="True"
                            dd:DragDrop.IsDropTarget="True"
                            dd:DragDrop.UseDefaultDragAdorner="True"
                            dd:DragDrop.UseDefaultEffectDataTemplate="True"
                            dd:DragDrop.DragDropCopyKeyState="ControlKey"
                            HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"
                            
                            ItemsSource="{TemplateBinding CollectionView}">
                            <ListView.ItemTemplateSelector>
                                <ui:PlaceholderTemplateSelector
                                    PlaceholderTemplate="{StaticResource HotkeySequenceActionsTemplate}" />
                            </ListView.ItemTemplateSelector>
                            <ListView.Style>
                                <Style TargetType="{x:Type ListView}"></Style>
                            </ListView.Style>
                            <ListView.ItemContainerStyle>
                                <Style TargetType="{x:Type ListViewItem}">
                                    <Setter Property="OverridesDefaultStyle" Value="True" />
                                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                    <Setter Property="Height" Value="64" />
                                    <Setter Property="MinWidth" Value="36" />
                                    <Setter Property="Padding" Value="0" />
                                    <Setter Property="Margin" Value="0,0, 10, 0" />
                                    <Setter Property="Visibility">
                                        <Setter.Value>
                                            <MultiBinding Converter="{StaticResource HotkeySequenceEditorItemVisibilityConverter}">
                                                <Binding Path="IsKeypress" />
                                                <Binding Path="HideKeypressDelays"
                                                         RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type hotkeys:HotkeySequenceEditor}}" />
                                            </MultiBinding>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ListViewItem}">
                                                <Border Name="Bd"
                                                        Margin="{TemplateBinding Padding}">
                                                    <ContentPresenter />
                                                </Border>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ListView.ItemContainerStyle>
                            <ListView.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <WrapPanel HorizontalAlignment="Left" />
                                </ItemsPanelTemplate>
                            </ListView.ItemsPanel>
                        </ListView>
                    </st:StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource ValidationErrorTemplate}" />
    </Style>

    <Style TargetType="{x:Type hotkeys:HotkeySequenceEditor}" BasedOn="{StaticResource DefaultHotkeySequenceEditorStyle}" />
</ui:SharedResourceDictionary>