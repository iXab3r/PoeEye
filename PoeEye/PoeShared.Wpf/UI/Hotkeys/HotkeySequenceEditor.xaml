<ui:SharedResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                             xmlns:hotkeys="clr-namespace:PoeShared.UI.Hotkeys"
                             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                             xmlns:ui="clr-namespace:PoeShared.UI"
                             xmlns:eye="clr-namespace:PoeShared.Scaffolding.WPF"
                             xmlns:dd="urn:gong-wpf-dragdrop"
                             xmlns:st="http://schemas.spicytaco.io/"
                             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity">
    <ui:SharedResourceDictionary.MergedDictionaries>
        <ui:SharedResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/materialdesigntheme.textbox.xaml" />
        <ui:SharedResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/materialdesigntheme.textblock.xaml" />
        <ui:SharedResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/materialdesigntheme.menu.xaml" />
        <ui:SharedResourceDictionary Source="pack://application:,,,/PoeShared.Wpf;component/Themes/Colors.xaml" />
        <ui:SharedResourceDictionary Source="pack://application:,,,/PoeShared.Wpf;component/Themes/Converters.xaml" />
        <ui:SharedResourceDictionary Source="pack://application:,,,/PoeShared.Wpf;component/Themes/Styles.xaml" />
    </ui:SharedResourceDictionary.MergedDictionaries>

    <DataTemplate DataType="{x:Type hotkeys:HotkeySequenceText}">
        <Border x:Name="TextItem"
                BorderThickness="1"
                BorderBrush="{x:Null}"
                Background="#664C00"
                Cursor="Hand"
                ToolTip="{Binding Text}"
                TextBlock.Foreground="White"
                Height="36" MinWidth="64" VerticalAlignment="Center"
                CornerRadius="5"
                Padding="5,0">
            <st:StackPanel Orientation="Horizontal" MarginBetweenChildren="5">
                <TextBlock Text="{Binding Text, Converter={StaticResource MultilineToSinglelineConverter}}"
                           MaxWidth="128"
                           TextTrimming="CharacterEllipsis"
                           st:StackPanel.Fill="Fill"
                           HorizontalAlignment="Center"
                           Foreground="White" />
                <materialDesign:PopupBox VerticalContentAlignment="Stretch"
                                         x:Name="EditPopup"
                                         Visibility="Collapsed"
                                         PopupMode="Click"
                                         StaysOpen="True"
                                         PlacementMode="LeftAndAlignMiddles">
                    <materialDesign:PopupBox.ToggleContent>
                        <TextBlock Style="{StaticResource IconTextBlock}"
                                   Text="&#xf044;"
                                   Foreground="White" />
                    </materialDesign:PopupBox.ToggleContent>
                    <TextBox Width="300" Height="150"
                             TextWrapping="Wrap"
                             Background="Black"
                             AcceptsReturn="True"
                             Foreground="White"
                             VerticalContentAlignment="Stretch"
                             HorizontalContentAlignment="Stretch"
                             eye:FocusHelper.IsFocused="True"
                             BorderBrush="#664C00"
                             BorderThickness="1"
                             Text="{Binding Text, UpdateSourceTrigger=PropertyChanged}">
                        <i:Interaction.Behaviors>
                            <eye:SelectAllOnFocusBehavior />
                        </i:Interaction.Behaviors>
                    </TextBox>
                </materialDesign:PopupBox>

            </st:StackPanel>

        </Border>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}"
                         Value="True">
                <Setter TargetName="TextItem" Property="TextBlock.Foreground" Value="#00A9E0" />
                <Setter TargetName="EditPopup" Property="Visibility" Value="Visible" />
                <Setter TargetName="TextItem" Property="BorderBrush" Value="#00A9E0" />
                <Setter TargetName="TextItem" Property="Background" Value="#00222D" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate DataType="{x:Type hotkeys:HotkeySequenceDelay}">
        <Border x:Name="DelayItem"
                Background="Transparent"
                Cursor="Hand"
                BorderThickness="1"
                BorderBrush="{x:Null}"
                MinWidth="36"
                TextBlock.Foreground="White"
                VerticalAlignment="Center"
                CornerRadius="5"
                Padding="5,0">
            <st:StackPanel Orientation="Vertical">
                <TextBox Text="{Binding Delay, Converter={StaticResource TimeSpanToMillisecondsConverter}}"
                         FontSize="16" FontWeight="Bold" Padding="0"
                         HorizontalAlignment="Center" />
                <Separator />
                <TextBlock Text="ms"
                           FontWeight="Bold"
                           HorizontalAlignment="Center" />
            </st:StackPanel>
        </Border>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}"
                         Value="True">
                <Setter TargetName="DelayItem" Property="TextBlock.Foreground" Value="#00A9E0" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate DataType="{x:Type hotkeys:HotkeySequenceHotkey}">
        <st:StackPanel x:Name="HotkeyContainer" Orientation="Vertical" MarginBetweenChildren="0" TextBlock.Foreground="White"
                       Cursor="Hand">
            <TextBlock x:Name="KeyUp" Style="{StaticResource IconTextBlock}" Text="&#xf106;" HorizontalAlignment="Center" VerticalAlignment="Bottom"
                       Visibility="Hidden" />
            <Border x:Name="KeyItem"
                    BorderThickness="1"
                    BorderBrush="{x:Null}"
                    Background="#660019"
                    Visibility="Collapsed"
                    Height="36" MinWidth="36" VerticalAlignment="Center"
                    CornerRadius="5" Padding="5,0">
                <TextBlock Text="{Binding Hotkey}"
                           FontWeight="Bold"
                           FontSize="16"
                           HorizontalAlignment="Center" />
            </Border>
            <Border x:Name="MouseItem"
                    BorderThickness="1"
                    BorderBrush="{x:Null}"
                    Visibility="Collapsed"
                    Height="36" MinWidth="36"
                    VerticalAlignment="Center"
                    CornerRadius="5" Padding="5,0">
                <Image x:Name="MouseImage" />
            </Border>
            <TextBlock x:Name="KeyDown" Style="{StaticResource IconTextBlock}" Text="&#xf107;" HorizontalAlignment="Center" VerticalAlignment="Top"
                       Visibility="Hidden" />
        </st:StackPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}"
                         Value="True">
                <Setter TargetName="HotkeyContainer" Property="TextBlock.Foreground" Value="#00A9E0" />
                <Setter TargetName="KeyItem" Property="BorderBrush" Value="#00A9E0" />
                <Setter TargetName="KeyItem" Property="Background" Value="#00222D" />
                <Setter TargetName="MouseItem" Property="BorderBrush" Value="#00A9E0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsDown}" Value="True">
                <Setter TargetName="KeyDown" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsDown}" Value="False">
                <Setter TargetName="KeyUp" Property="Visibility" Value="Visible" />
            </DataTrigger>

            <DataTrigger Binding="{Binding IsMainMouseButton}" Value="True">
                <Setter TargetName="MouseItem" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsMainMouseButton}" Value="False">
                <Setter TargetName="KeyItem" Property="Visibility" Value="Visible" />
            </DataTrigger>

            <DataTrigger Binding="{Binding Hotkey.MouseButton}" Value="{x:Static MouseButton.Left}">
                <Setter TargetName="MouseImage" Property="Source" Value="../../Resources/mouse-device-left-click-control.png" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Hotkey.MouseButton}" Value="{x:Static MouseButton.Right}">
                <Setter TargetName="MouseImage" Property="Source" Value="../../Resources/mouse-device-right-click-control.png" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Hotkey.MouseButton}" Value="{x:Static MouseButton.Middle}">
                <Setter TargetName="MouseImage" Property="Source" Value="../../Resources/mouse-device-middle-click-control.png" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate DataType="{x:Type hotkeys:HotkeySequenceActions}">
        <materialDesign:PopupBox
            Foreground="White"
            Background="Gray" Width="32" Height="32"
            Style="{StaticResource MaterialDesignMultiFloatingActionPopupBox}"
            PlacementMode="RightAndAlignMiddles"
            ToolTipService.Placement="Right">
            <StackPanel>
                <ui:ButtonEx Command="{Binding AddRecording}"
                             HorizontalAlignment="Left" CornerRadius="5"
                             Foreground="White" Background="#660019">
                    RECORD KEYSTROKES
                    <ui:ButtonEx.Icon>
                        <Ellipse Width="10" Height="10" Fill="Red" Stroke="White" />
                    </ui:ButtonEx.Icon>
                </ui:ButtonEx>
                <ui:ButtonEx
                    Command="{Binding AddDelayItem}"
                    Icon="&#xf017;" HorizontalAlignment="Left" CornerRadius="5"
                    Foreground="White" Background="Gray">
                    DELAY
                </ui:ButtonEx>
                <ui:ButtonEx
                    Command="{Binding AddTextItem}"
                    Icon="&#xf040;" HorizontalAlignment="Left" CornerRadius="5"
                    Foreground="White" Background="#664C00">
                    TEXT
                </ui:ButtonEx>
            </StackPanel>
        </materialDesign:PopupBox>
    </DataTemplate>

    <Style TargetType="{x:Type hotkeys:HotkeySequenceEditor}">
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hotkeys:HotkeySequenceEditor}">
                    <Grid>
                        <ListView
                            x:Name="PART_ListBox"
                            Background="{TemplateBinding Background}"
                            dd:DragDrop.DropHandler="{x:Static hotkeys:DropHandlerEx.Instance}"
                            ScrollViewer.VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
                            ScrollViewer.HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}"
                            dd:DragDrop.IsDragSource="True"
                            dd:DragDrop.IsDropTarget="True"
                            dd:DragDrop.UseDefaultDragAdorner="True"
                            dd:DragDrop.UseDefaultEffectDataTemplate="True"
                            HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch">
                            <ListView.Style>
                                <Style TargetType="{x:Type ListView}">
                                </Style>
                            </ListView.Style>
                            <ListView.ItemsSource>
                                <MultiBinding Converter="{StaticResource CompositeCollectionConverter}">
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Items"/>
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Actions"/>
                                </MultiBinding>
                            </ListView.ItemsSource>
                            <ListView.ItemContainerStyle>
                                <Style TargetType="{x:Type ListViewItem}">
                                    <Setter Property="OverridesDefaultStyle" Value="True" />
                                    <Setter Property="dd:DragDrop.DragSourceIgnore" Value="{Binding IsDragDropSource, Converter={StaticResource NotConverter}}"></Setter>
                                    <Setter Property="Height" Value="64" />
                                    <Setter Property="MinWidth" Value="36" />
                                    <Setter Property="Padding" Value="0" />
                                    <Setter Property="Margin" Value="10,0" />
                                    <Setter Property="Visibility" Value="{Binding IsVisible, Converter={StaticResource TrueToVisibleFalseToCollapsedConverter}}" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ListViewItem}">
                                                <Border Name="Bd"
                                                        Margin="{TemplateBinding Padding}">
                                                    <ContentPresenter />
                                                </Border>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ListView.ItemContainerStyle>
                            <ListView.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <WrapPanel Margin="10" HorizontalAlignment="Left"  />
                                </ItemsPanelTemplate>
                            </ListView.ItemsPanel>
                        </ListView>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource ValidationErrorTemplate}" />
    </Style>

</ui:SharedResourceDictionary>