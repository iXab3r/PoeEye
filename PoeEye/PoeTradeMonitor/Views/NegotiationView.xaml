<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:blue="http://www.nuget.org/Blue.MVVM"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:viewModels="clr-namespace:PoeEye.TradeMonitor.ViewModels"
                    xmlns:converters="clr-namespace:PoeShared.Scaffolding.WPF.Converters;assembly=PoeShared"
                    xmlns:models="clr-namespace:PoeEye.TradeMonitor.Models"
                    xmlns:chat="clr-namespace:PoeWhisperMonitor.Chat;assembly=PoeWhisperMonitor"
                    xmlns:themes="clr-namespace:PoeEye.TradeMonitor.Themes"
                    xmlns:fa="http://schemas.fontawesome.io/icons/"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:common="clr-namespace:PoeShared.Common;assembly=PoeShared">

  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="pack://application:,,,/PoeShared;component/Themes/Generic.xaml" />
    <ResourceDictionary Source="pack://application:,,,/PoeTradeMonitor;component/Themes/Styles.xaml" />
    <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/materialdesigntheme.progressbar.xaml" />
    <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/materialdesigntheme.button.xaml" />
  </ResourceDictionary.MergedDictionaries>

  <blue:BoolToVisibilityConverter x:Key="TrueToVisibleConverter"
                                  TrueValue="Visible"
                                  FalseValue="Collapsed" />

  <blue:BoolToVisibilityConverter x:Key="TrueToVisibleFalseToHiddenConverter"
                                  TrueValue="Visible"
                                  FalseValue="Hidden" />

  <converters:TimeSpanToHumanReadableStringConverter x:Key="TimeSpanToHumanReadableStringConverter" />

  <DataTemplate DataType="{x:Type viewModels:NegotiationViewModel}">
    <DataTemplate.Resources>
      <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TradeMonitorTextBlockStyleKey}">
        <Setter Property="FontSize" Value="16" />
      </Style>
      <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignFloatingActionMiniButton}">
        <Setter Property="Width" Value="20" />
        <Setter Property="Height" Value="20" />
        <Setter Property="FontSize" Value="20" />
      </Style>
      <Style TargetType="{x:Type ToolTip}">
        <Setter Property="HasDropShadow" Value="False" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="1" />
      </Style>

      <Style TargetType="{x:Type ToggleButton}" x:Key="ExpanderUpHeaderStyleKey">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ToggleButton}">
              <Border Background="{TemplateBinding Background}" Padding="8,2,8,2">
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>
                  <ToggleButton Grid.Column="0"
                                IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                VerticalAlignment="Center"
                                Foreground="{TemplateBinding Foreground}"
                                Style="{StaticResource MaterialDesignExpanderToggleButton}"
                                RenderTransformOrigin="0.5,0.5">
                    <ToggleButton.RenderTransform>
                      <RotateTransform Angle="-180" />
                    </ToggleButton.RenderTransform>
                  </ToggleButton>

                  <ContentPresenter Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                    VerticalAlignment="Center"
                                    Grid.Column="1"
                                    Margin="0" />
                </Grid>
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>

      <Style TargetType="{x:Type ToggleButton}" x:Key="ExpanderDownHeaderStyleKey">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ToggleButton}">
              <Border Background="{TemplateBinding Background}" Padding="8,2,8,2">
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                  </Grid.ColumnDefinitions>
                  <ToggleButton Grid.Column="0"
                                VerticalAlignment="Center"
                                Foreground="{TemplateBinding Foreground}"
                                IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                Style="{StaticResource MaterialDesignExpanderToggleButton}" />

                  <ContentPresenter Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                    VerticalAlignment="Center"
                                    Grid.Column="1"
                                    Margin="0" />
                </Grid>
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>

      <Style TargetType="{x:Type Expander}" BasedOn="{StaticResource MaterialDesignExpander}">
        <Setter Property="Background" Value="{StaticResource TradeMonitorTitleBackgroundBrushKey}" />
        <Setter Property="IsExpanded" Value="{Binding IsExpanded}" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Expander}">
              <Border BorderThickness="{TemplateBinding BorderThickness}"
                      BorderBrush="{TemplateBinding BorderBrush}">
                <VisualStateManager.VisualStateGroups>
                  <VisualStateGroup x:Name="ExpansionStates">
                    <VisualStateGroup.Transitions>
                      <VisualTransition GeneratedDuration="0" To="Expanded">
                        <VisualTransition.GeneratedEasingFunction>
                          <CubicEase EasingMode="EaseOut" />
                        </VisualTransition.GeneratedEasingFunction>
                        <Storyboard>
                          <ObjectAnimationUsingKeyFrames
                            Storyboard.TargetName="PART_Content"
                            Storyboard.TargetProperty="Visibility">
                            <DiscreteObjectKeyFrame KeyTime="0"
                                                    Value="{x:Static Visibility.Visible}" />
                          </ObjectAnimationUsingKeyFrames>
                          <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                           Storyboard.TargetName="PART_Content"
                                           To="1" Duration="0:0:0.2" />
                        </Storyboard>
                      </VisualTransition>
                      <VisualTransition GeneratedDuration="0" To="Collapsed">
                        <VisualTransition.GeneratedEasingFunction>
                          <CubicEase EasingMode="EaseOut" />
                        </VisualTransition.GeneratedEasingFunction>
                        <Storyboard>
                          <ObjectAnimationUsingKeyFrames
                            Storyboard.TargetName="PART_Content"
                            Storyboard.TargetProperty="Visibility">
                            <DiscreteObjectKeyFrame KeyTime="0:0:0.2"
                                                    Value="{x:Static Visibility.Collapsed}" />
                          </ObjectAnimationUsingKeyFrames>
                          <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                           Storyboard.TargetName="PART_Content"
                                           To="0" Duration="0:0:0.2" />
                        </Storyboard>
                      </VisualTransition>
                    </VisualStateGroup.Transitions>
                    <VisualState x:Name="Expanded">
                      <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                         Storyboard.TargetName="PART_Content"
                                         To="1" Duration="0" />
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content"
                                                       Storyboard.TargetProperty="Visibility">
                          <DiscreteObjectKeyFrame KeyTime="0"
                                                  Value="{x:Static Visibility.Visible}" />
                        </ObjectAnimationUsingKeyFrames>
                      </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Collapsed">
                      <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                         Storyboard.TargetName="PART_Content"
                                         To="0" Duration="0" />
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content"
                                                       Storyboard.TargetProperty="Visibility">
                          <DiscreteObjectKeyFrame KeyTime="0"
                                                  Value="{x:Static Visibility.Hidden}" />
                        </ObjectAnimationUsingKeyFrames>
                      </Storyboard>
                    </VisualState>
                  </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
                <Grid>
                  <DockPanel Background="{TemplateBinding Background}">
                    <ToggleButton Name="HeaderSite"
                                  DockPanel.Dock="Top"
                                  BorderThickness="0" Cursor="Hand"
                                  IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                  TextElement.FontSize="15"
                                  Opacity=".87"
                                  Foreground="{TemplateBinding Foreground}"
                                  Content="{TemplateBinding Header}"
                                  ContentTemplate="{TemplateBinding HeaderTemplate}"
                                  ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                  ContentStringFormat="{TemplateBinding HeaderStringFormat}" />
                    <Border Name="ContentSite"
                            DockPanel.Dock="Bottom">
                      <StackPanel Name="ContentPanel"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  Margin="{TemplateBinding Padding}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                        <StackPanel.Height>
                          <MultiBinding
                            Converter="{StaticResource MathMlpMultipleConverter}">
                            <Binding ElementName="PART_Content" Path="ActualHeight" />
                            <Binding ElementName="PART_Content" Path="Opacity" />
                          </MultiBinding>
                        </StackPanel.Height>
                        <StackPanel.Width>
                          <MultiBinding
                            Converter="{StaticResource MathMlpMultipleConverter}">
                            <Binding ElementName="PART_Content" Path="ActualWidth" />
                            <Binding ElementName="PART_Content" Path="Opacity" />
                          </MultiBinding>
                        </StackPanel.Width>
                        <ContentPresenter Name="PART_Content" Focusable="False"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                      </StackPanel>
                    </Border>
                  </DockPanel>
                </Grid>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="ExpandDirection" Value="Up">
                  <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom" />
                  <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Top" />
                  <Setter Property="Orientation" TargetName="ContentPanel" Value="Vertical" />
                  <Setter Property="Width" TargetName="ContentPanel" Value="Auto" />
                  <Setter Property="Style" TargetName="HeaderSite"
                          Value="{StaticResource ExpanderUpHeaderStyleKey}" />
                </Trigger>
                <Trigger Property="ExpandDirection" Value="Down">
                  <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Top" />
                  <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Bottom" />
                  <Setter Property="Orientation" TargetName="ContentPanel" Value="Vertical" />
                  <Setter Property="Width" TargetName="ContentPanel" Value="Auto" />
                  <Setter Property="Style" TargetName="HeaderSite"
                          Value="{StaticResource ExpanderDownHeaderStyleKey}" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>

        <Style.Triggers>
          <MultiTrigger>
            <MultiTrigger.Conditions>
              <Condition Property="IsMouseOver" Value="True" />
              <Condition Property="themes:TradeMonitorExpanderHelper.ExpandOnHover" Value="True" />
            </MultiTrigger.Conditions>
            <MultiTrigger.EnterActions>
              <BeginStoryboard>
                <Storyboard>
                  <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="IsExpanded">
                    <DiscreteBooleanKeyFrame Value="True" KeyTime="0:0:0.3" />
                  </BooleanAnimationUsingKeyFrames>
                </Storyboard>
              </BeginStoryboard>
            </MultiTrigger.EnterActions>
            <MultiTrigger.ExitActions>
              <BeginStoryboard>
                <Storyboard>
                  <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="IsExpanded">
                    <DiscreteBooleanKeyFrame Value="False" KeyTime="0:0:0.3" />
                  </BooleanAnimationUsingKeyFrames>
                </Storyboard>
              </BeginStoryboard>
            </MultiTrigger.ExitActions>
          </MultiTrigger>
        </Style.Triggers>
      </Style>

    </DataTemplate.Resources>

    <Grid Background="Transparent">
      <Border Margin="-3">
        <Border.Style>
          <Style TargetType="{x:Type Border}">
            <Setter Property="Background">
              <Setter.Value>
                <LinearGradientBrush MappingMode="RelativeToBoundingBox">
                  <GradientStop Color="Transparent" Offset="0" />
                  <GradientStop Color="{StaticResource AccentBaseColor}" Offset="0" />
                </LinearGradientBrush>
              </Setter.Value>
            </Setter>
            <Setter Property="Effect">
              <Setter.Value>
                <BlurEffect Radius="0" KernelType="Gaussian" />
              </Setter.Value>
            </Setter>
            <Style.Triggers>
              <DataTrigger Binding="{Binding IsFresh}" Value="True">
                <DataTrigger.EnterActions>
                  <BeginStoryboard>
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                       Duration="0:0:2"
                                       From="0"
                                       To="1" />
                      <DoubleAnimation Storyboard.TargetProperty="Effect.(BlurEffect.Radius)"
                                       Duration="0:0:2"
                                       AutoReverse="True"
                                       From="7"
                                       To="3" />
                      <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                       Duration="0:0:5"
                                       BeginTime="0:0:4"
                                       From="1"
                                       To="0" />
                    </Storyboard>
                  </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                  <BeginStoryboard>
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                       Duration="0:0:2"
                                       To="0" />
                    </Storyboard>
                  </BeginStoryboard>
                </DataTrigger.ExitActions>
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </Border.Style>
      </Border>

      <Expander BorderBrush="{StaticResource TradeMonitorBorderBrushKey}"
                BorderThickness="1"
                Padding="0"
                Focusable="False"
                IsTabStop="False"
                ExpandDirection="{Binding Path=(themes:TradeMonitorExpanderHelper.ExpanderDirection), RelativeSource={RelativeSource Self}, Mode=OneWay}">
        <Expander.Header>
          <Grid Height="24">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <ContentControl Grid.Column="0" Width="4" Height="20" Margin="1,0">
              <ContentControl.Style>
                <Style TargetType="{x:Type ContentControl}">
                  <Setter Property="Template">
                    <Setter.Value>
                      <ControlTemplate TargetType="{x:Type ContentControl}">
                        <Grid>
                          <ProgressBar x:Name="StateInProgress" Orientation="Vertical" 
                                       Style="{StaticResource MaterialDesignLinearProgressBar}"
                                       VerticalAlignment="Stretch"
                                       IsIndeterminate="True"/>
                          <Border x:Name="StateVerified" Background="GreenYellow"/>
                          <Border x:Name="StateSold" Background="Red"/>
                          <Border x:Name="StateUnknown" Background="LightGray" Visibility="Hidden"/>
                        </Grid>

                        <ControlTemplate.Triggers>
                          <DataTrigger Binding="{Binding VerificationState}" Value="{x:Static common:PoeItemVerificationState.Unknown}">
                            <Setter TargetName="StateInProgress" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="StateSold" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="StateVerified" Property="Visibility" Value="Collapsed"/>
                          </DataTrigger>
                          <DataTrigger Binding="{Binding VerificationState}" Value="{x:Static common:PoeItemVerificationState.InProgress}">
                            <Setter TargetName="StateInProgress" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="StateSold" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="StateVerified" Property="Visibility" Value="Collapsed"/>
                          </DataTrigger>
                          <DataTrigger Binding="{Binding VerificationState}" Value="{x:Static common:PoeItemVerificationState.Sold}">
                            <Setter TargetName="StateInProgress" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="StateSold" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="StateVerified" Property="Visibility" Value="Collapsed"/>
                          </DataTrigger>
                          <DataTrigger Binding="{Binding VerificationState}" Value="{x:Static common:PoeItemVerificationState.Verified}">
                            <Setter TargetName="StateInProgress" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="StateSold" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="StateVerified" Property="Visibility" Value="Visible"/>
                          </DataTrigger>
                        </ControlTemplate.Triggers>
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </Style>
              </ContentControl.Style>
            </ContentControl>

            <TextBlock Grid.Column="1"
                       Foreground="{StaticResource TradeMonitorTextBrushKey}"
                       TextTrimming="CharacterEllipsis"
                       Text="{Binding CharacterName}" />

            <TextBlock
              Grid.Column="2"
              VerticalAlignment="Center"
              HorizontalAlignment="Left"
              Margin="5,0">
              <TextBlock.Style>
                <Style TargetType="{x:Type TextBlock}"
                       BasedOn="{StaticResource IconTextBlock}">
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding NegotiationType}"
                                 Value="{x:Static models:TradeType.Sell}">
                      <Setter Property="Text" Value="&#xf061;" />
                      <Setter Property="Foreground" Value="#AEAB94" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding NegotiationType}"
                                 Value="{x:Static models:TradeType.Buy}">
                      <Setter Property="Text" Value="&#xf060;" />
                      <Setter Property="Foreground" Value="GreenYellow" />
                    </DataTrigger>
                  </Style.Triggers>

                </Style>

              </TextBlock.Style>
            </TextBlock>

            <ContentPresenter
              Grid.Column="3"
              HorizontalAlignment="Left"
              TextBlock.Foreground="{StaticResource PoeItemRarityUniqueBrush}"
              TextBlock.FontSize="16"
              TextBlock.FontWeight="SemiBold"
              Content="{Binding Price}"
              ToolTip="{Binding PriceInChaos}" />

            <fa:ImageAwesome Grid.Column="4"
                             Icon="Bullseye"
                             Height="16"
                             Width="16"
                             Margin="3,0"
                             Visibility="{Binding CanHighlight, Converter={StaticResource TrueToVisibleFalseToCollapsedConverter}}"
                             ToolTip="Highlight item in Stash">
              <fa:ImageAwesome.Style>
                <Style TargetType="{x:Type fa:ImageAwesome}">
                  <Setter Property="Foreground">
                    <Setter.Value>
                      <SolidColorBrush Color="{StaticResource TradeMonitorTextColorKey}" x:Name="IconColor"></SolidColorBrush>
                    </Setter.Value>
                  </Setter>
                  <Setter Property="RenderTransformOrigin" Value="0.5,0.5"></Setter>
                  <Setter Property="RenderTransform">
                    <Setter.Value>
                      <ScaleTransform ScaleX="1" ScaleY="1"/>
                    </Setter.Value>
                  </Setter>
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding IsHighlighted}" Value="True">
                      <DataTrigger.EnterActions>
                        <BeginStoryboard Name="HighlightingAnimation">
                          <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="Foreground.(SolidColorBrush.Color)" Duration="0:0:8">
                              <EasingColorKeyFrame Value="{StaticResource AccentColor}"
                                                   KeyTime="0:0:1"/>
                            </ColorAnimationUsingKeyFrames>
                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleX)"
                                             Duration="0:0:0.5"
                                             From="1.5"
                                             To="1" />
                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleY)"
                                             Duration="0:0:0.5"
                                             From="1.5"
                                             To="1" />
                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleX)"
                                             Duration="0:0:0.5"
                                             BeginTime="0:0:0.5"
                                             From="1"
                                             To="1.2"
                                             AutoReverse="True"
                                             RepeatBehavior="Forever" />
                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleY)"
                                             Duration="0:0:0.5"
                                             BeginTime="0:0:0.5"
                                             From="1"
                                             To="1.2"
                                             AutoReverse="True"
                                             RepeatBehavior="Forever"/>
                          </Storyboard>
                        </BeginStoryboard>
                      </DataTrigger.EnterActions>
                      <DataTrigger.ExitActions>
                        <StopStoryboard BeginStoryboardName="HighlightingAnimation"/>
                      </DataTrigger.ExitActions>
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </fa:ImageAwesome.Style>
              <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseEnter">
                  <i:InvokeCommandAction Command="{Binding HighlightCommand}" />
                </i:EventTrigger>
              </i:Interaction.Triggers>
            </fa:ImageAwesome>

            <TextBlock Grid.Column="5"
                       Foreground="{StaticResource TradeMonitorTextBrushKey}"
                       FontSize="13"
                       MinWidth="30"
                       TextAlignment="Right"
                       HorizontalAlignment="Right"
                       Text="{Binding TimeElapsed, Converter={StaticResource TimeSpanToHumanReadableStringConverter}}" />

            <StackPanel Grid.Column="6"
                        Orientation="Horizontal">
              <Button fa:Awesome.Content="Plus"
                      Margin="2,0"
                      Foreground="#02FF61"
                      ToolTip="Invite to party"
                      Command="{Binding InviteToPartyCommand}" />

              <Button fa:Awesome.Content="Minus"
                      Margin="2,0"
                      Foreground="#FF3B04"
                      ToolTip="Kick from party"
                      Command="{Binding KickFromPartyCommand}" />

              <Button fa:Awesome.Content="HandshakeOutline"
                      Margin="2,0"
                      Foreground="#FCD24E"
                      FontSize="16"
                      ToolTip="Initiate trade (opens trade dialog)"
                      Command="{Binding TradeCommand}" />

              <Button fa:Awesome.Content="CommentOutline"
                      Margin="2,0"
                      Foreground="{StaticResource TextBrush}"
                      FontSize="16"
                      ToolTip="Initiate chat (opens chat window)"
                      Command="{Binding OpenChatCommand}" />

              <Button fa:Awesome.Content="Close"
                      Foreground="{StaticResource TextBrush}"
                      Command="{Binding RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}, Path=DataContext.CloseNegotiationCommand}"
                      CommandParameter="{Binding}"
                      ToolTip="Close this negotiation"
                      FontSize="14"
                      Margin="2,0" />
            </StackPanel>
          </Grid>
        </Expander.Header>

        <Border Background="{StaticResource TradeMonitorBackgroundBrushKey}">

          <Grid Margin="1">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <Viewbox Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="4" Height="40">
              <StackPanel Orientation="Horizontal"
                          Background="Transparent"
                          HorizontalAlignment="Center"
                          ToolTipService.HasDropShadow="False"
                          ToolTipService.InitialShowDelay="0"
                          ToolTipService.ShowDuration="{x:Static system:Int32.MaxValue}"
                          ToolTipService.ShowOnDisabled="True">
                <StackPanel.ToolTip>
                  <Border Background="{StaticResource TradeMonitorBackgroundBrushKey}"
                          BorderBrush="{StaticResource TradeMonitorBorderBrushKey}"
                          BorderThickness="1">
                    <ContentPresenter Content="{Binding Item}"
                                      TextBlock.Foreground="{StaticResource TextBrush}" />
                  </Border>

                </StackPanel.ToolTip>

                <ContentPresenter
                  Content="{Binding ItemIcon}"
                  Visibility="{Binding ItemIcon, Converter={StaticResource NullToCollapsedConverter}}"
                  Height="40"
                  Width="40"
                  Margin="5,0" />

                <DockPanel LastChildFill="True">
                  <TextBlock
                    DockPanel.Dock="Bottom"
                    Foreground="{StaticResource TradeMonitorTextBrushKey}"
                    FontSize="13"
                    Margin="0,1"
                    Text="{Binding Offer}"
                    HorizontalAlignment="Center"
                    Visibility="{Binding Offer, Converter={StaticResource NullToCollapsedConverter}}" />
                  
                  <ContentPresenter DockPanel.Dock="Top"
                                    VerticalAlignment="Center"
                                    TextBlock.Foreground="{StaticResource PoeItemRarityUniqueBrush}"
                                    TextBlock.FontSize="16"
                                    TextBlock.FontWeight="SemiBold"
                                    Content="{Binding ItemName}" />
                </DockPanel>
              </StackPanel>
            </Viewbox>

            <ItemsControl Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="4"
                          Margin="2"
                          HorizontalAlignment="Left"
                          ItemsSource="{Binding PredefinedMessages}">

              <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                  <StackPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
              </ItemsControl.ItemsPanel>

              <ItemsControl.ItemTemplate>
                <DataTemplate DataType="{x:Type models:MacroMessage}">
                  <Button Content="{Binding Label}"
                          Margin="5,0"
                          Style="{StaticResource MetroFlatButton}"
                          Height="26"
                          FontSize="13"
                          CommandParameter="{Binding}"
                          ToolTip="{Binding Text}"
                          Command="{Binding DataContext.SendPredefinedMessageCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}" />
                </DataTemplate>
              </ItemsControl.ItemTemplate>
            </ItemsControl>

            <StackPanel Orientation="Horizontal" Grid.Column="3" Grid.Row="1">
              <TextBlock
                Foreground="{StaticResource TradeMonitorTextBrushKey}"
                VerticalAlignment="Center"
                HorizontalAlignment="Right"
                Margin="5,0">
                <TextBlock.Inlines>
                  <Run Text="{Binding TabName, Mode=OneWay}" /> (
                  <Run Text="{Binding ItemPosition, Mode=OneWay}" /> )
                </TextBlock.Inlines>
              </TextBlock>
            </StackPanel>

            <Border Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="4" Grid.RowSpan="2"
                    VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                    Background="{StaticResource TradeMonitorTitleBackgroundBrushKey}"
                    BorderThickness="1"
                    IsHitTestVisible="False"
                    BorderBrush="{StaticResource ValidationBrush5}">
              <Border.Style>
                <Style TargetType="{x:Type Border}">
                  <Setter Property="Visibility" Value="Visible" />
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding MessageSendStatus}"
                                 Value="{x:Static chat:PoeMessageSendStatus.Unknown}">
                      <Setter Property="Visibility" Value="Hidden" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding MessageSendStatus}"
                                 Value="{x:Static chat:PoeMessageSendStatus.Success}">
                      <Setter Property="Visibility" Value="Hidden" />
                    </DataTrigger>
                    <Trigger Property="Visibility" Value="Visible">
                      <Trigger.EnterActions>
                        <BeginStoryboard>
                          <Storyboard>
                            <DoubleAnimationUsingKeyFrames
                              Storyboard.TargetProperty="Opacity"
                              Duration="00:00:04">
                              <LinearDoubleKeyFrame KeyTime="0%" Value="0" />
                              <LinearDoubleKeyFrame KeyTime="5%" Value="1" />
                              <LinearDoubleKeyFrame KeyTime="50%" Value="1" />
                              <LinearDoubleKeyFrame KeyTime="99%" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                          </Storyboard>
                        </BeginStoryboard>
                      </Trigger.EnterActions>
                    </Trigger>
                  </Style.Triggers>
                </Style>
              </Border.Style>

              <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                <TextBlock Style="{StaticResource TradeMonitorTextBlockStyleKey}"
                           Text="&#xf06a;"
                           Foreground="{StaticResource ControlsValidationBrush}"
                           FontSize="30"
                           ToolTip="{Binding MessageSendStatus}"
                           Margin="5,0" />

                <TextBlock
                  Foreground="{StaticResource ControlsValidationBrush}"
                  FontSize="18"
                  FontWeight="Bold"
                  Text="{Binding MessageSendStatus, StringFormat='Failed to send message: {0}'}" />

              </StackPanel>

            </Border>

          </Grid>
        </Border>

      </Expander>


    </Grid>


  </DataTemplate>
</ResourceDictionary>